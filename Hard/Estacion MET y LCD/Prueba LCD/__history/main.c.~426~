/*======================================================================================================
||   Proyecto: Casandra v1.0                                                                          ||
||   Autor: Gonzalo Carvallo (gonzacarv@gmail.com)                                                    ||
||   Fecha: 07/2014                                                                                   ||
||   Compilador: PCWHD v5.025 (www.ccsinfo.com)                                                       ||
||   Fuente: http://                                                                                  ||
||                                                                                                    ||
|| Firmware del modulo servidor (display, teclado, sensor de humedad y temperatura) correspondiente   ||
|| al sistema domotico CASANDRA. Control general con uso intensivo de EEPROM. Comunicacion sobre par  ||
|| trensado usando el transceptor SN75176.                                                            ||
||                                                                                                    ||
======================================================================================================*/

#include <18f2550.h>

#byte TMR1H = 0xFCF // Le pongo nombre al registro alto de timer 1
#byte TMR1L = 0xFCE // Le pongo nombre al registro bajo de timer 1

#fuses XT, NOPROTECT, NOLVP, NOBROWNOUT, PLL1, CPUDIV1, NOMCLR, NOUSBDIV, NOVREGEN, WDT1024 // Opciones de configuración

#use delay(clock=4000000)  // Reloj de 4MHz
#use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7, enable=PIN_C5) // Comunicacion serial

#include "DHT11.h"
#include "FLEX_LCD_164.c"
#include "DS1307.c"
//#include <string.h>
//#include <internal_eeprom.c> 


///////////////////// Variables y Funciones para DHT11  ////////////////////////////////
unsigned char values[5];   // Arreglo de valores (Solo nos sirve 0-temp- y 2-humedad-)
void DHT11_init();         // iniciador estabilizador
unsigned char get_byte();  // Funcion que arma cada byte
unsigned char get_data();  // Funcion que asigna los valores a los diferentes bytes
unsigned char state = 0;   // Estado del sensor
////////////////////////////////////////////////////////////////////////////////////////


////// Variables del DS1307 /////
byte sec;
byte min;
byte hrs;
byte day;
byte month;
byte year;
byte dow;
/////////////////////////////////


///////////////// Definiciones de Pines /////////////////////
#define DHT11_pin PIN_B3     // Sensor DHT11
#define LCDLED PIN_A1        // Luz de pantalla led
#define ARRIBA PIN_B7        // Teclado arriba
#define ABAJO  PIN_B6        // Teclado abajo
#define OOKK   PIN_B5        // Teclado ok
#define CANCEL PIN_B4        // Teclado cancelar
#define TempIn values[2]     // Temperatura
#define Hum values[0]        // Humedad
#define OFFLCDLED output_low(PIN_A1)
#define ONLCDLED  output_high(PIN_A1)
#define LIMPIARLCD lcd_putc("\f")

//////////////// Definicion de los sensores y Luces protagonistas /////////////////////////////
#define SensPasilloCua   44 // Ultimo de modulo 1 (cuartos)
#define SensEstar        56 // Ultimo de modulo 2 (cuartos)
#define SensHall         66 // Antepenultimo de modulo 3 (cocina)
#define SensCocina       67 // Penultimo de modulo 3 (cocina)
#define SensLiving       68 // Ultimo de modulo 3 (cocina)
#define SensPasilloLav   79 // Penultimo de modulo 4 (cocina)
#define SensGarage       80 // Ultimo de modulo 4 (cocina)
#define SensGaleria1     91 // Penultimo de modulo 5 (galeria)
#define SensGaleria2     92 // Ultimo de modulo 5 (galeria)

#define LHall       57 // Luz del hall
#define LCocina     58 // Luz de la cocina


///////////////// Definiciones de posiciones de memoria eeprom /////////////////
#define EstAlarma 2          // Estado de la alarma
#define EstCasandra 3        // Estado de casandra
#define TpoSil 4             // Tiempo de Alarma Silenciosa (en segundos de 1 a 180)
#define TpoSal 5             // Tiempo para salir (en segundos de 1 a 180)
#define Password 6 // y 7    // Puntero de password (OJO!!! es solo el puntero, ocupa 2 bytes de memoria, 6 y 7)

#define Luz1 33   // Posiciones de memoria para la intensidad de cada luz
#define Luz2 34
#define Luz3 35
#define Luz4 36
#define Luz5 37
#define Luz6 38
#define Luz7 39
#define Luz8 40
#define Luz9 41
#define Luz10 42
#define Luz11 43
#define Luz12 44
#define Luz13 45
#define Luz14 46
#define Luz15 47
#define Luz16 48
#define Luz17 49
#define Luz18 50
#define Luz19 51
#define Luz20 52
#define Luz21 53
#define Luz22 54
#define Luz23 55
#define Luz24 56
#define Luz25 57
#define Luz26 58
#define Luz27 59
#define Luz28 60
#define Luz29 61
#define Luz30 62
#define Luz31 63
#define Luz32 64
#define Luz33 65
#define Luz34 66
#define Luz35 67
#define Luz36 68
#define Luz37 69
#define Luz38 70
#define Luz39 71
#define Luz40 72
#define Luz41 73
#define Luz42 74
#define Luz43 75
#define Luz44 76
#define Luz45 77
#define Luz46 78
#define Luz47 79
#define Luz48 80
#define Luz49 81
#define Luz50 82
#define Luz51 83
#define Luz52 84
#define Luz53 85
#define Luz54 86
#define Luz55 87
#define Luz56 88
#define Luz57 89
#define Luz58 90
#define Luz59 91
#define Luz60 92

#define TempMaxLun 100        // Temperatura maxima del lunes
#define TempMaxMar 105        // Temperatura maxima del martes
#define TempMaxMie 110        // Temperatura maxima del miercoles
#define TempMaxJue 115        // Temperatura maxima del jueves
#define TempMaxVie 120        // Temperatura maxima del viernes
#define TempMaxSab 125        // Temperatura maxima del sabado
#define TempMaxDom 130        // Temperatura maxima del domingo

#define TempMinLun 135        // Temperatura minima del lunes
#define TempMinMar 140        // Temperatura minima del martes
#define TempMinMie 145        // Temperatura minima del miercoles
#define TempMinJue 150        // Temperatura minima del jueves
#define TempMinVie 155        // Temperatura minima del viernes
#define TempMinSab 160        // Temperatura minima del sabado
#define TempMinDom 165        // Temperatura minima del domingo

#define SolLun 170            // Sol maximo del lunes
#define SolMar 175            // Sol maximo del martes
#define SolMie 180            // Sol maximo del miercoles
#define SolJue 185            // Sol maximo del jueves
#define SolVie 190           // Sol maximo del viernes
#define SolSab 195           // Sol maximo del sabado
#define SolDom 200           // Sol maximo del domingo


///////////////// Funciones Generales ////////////////
void inicio();     // Configuracion inicial
void BusData();    // Bus de datos con algo para meter en el comando
void Comunica();   // Funcion de lectura de puerto serial y armado del comando
void Teclado();    // Leemos el teclado
void Pantalla();   // Actualizamos la pantalla (por o general despues de un evento de teclado)
void Tiempo();     // Funcion para actualizar el tiempo
void Ambiente();   // Funcion para cargar variables ambientales
void AcercaDe();   // Acerca de...
void Holding();    // Pantalla de hold
void ActAlarma();  // Activador de alarma
void LuzOnOff();   // Enciende o apaga la luz
//void LuzGrupo();   // Enciende o apaga grupo de luces
void LuzInt();     // Configuracion de la intensidad de cada luz
void Ccasandra();  // Configuracion del nivel de automatico
void ConfAlarma(); // Configuracion de la alarma
//ACDias();
//ACHs();
//ACluces();
int Autenticar();  // Chequeo de contraseña, devuelve 1 si es correcta y 0 si no
void CClave();     // Funcion para cambiar la clave
void CHs();        // Funcion para cambiar la hora
void CReset();     // Resetea todas las variables del sistema
void ConfAlarma(); // Configuracion de alarma


/////////////// Variables globales ///////////////
int Menu;          // Posicion dentro del menu
int TempMax[4];    // Temperatura maxima de la semana - dia - hora - minuto
int TempMin[4];    // Temperatura minima de la semana - dia - hora - minuto 
int SolMax[4];     // Maximo nivel de radiacion de sol en la semana - dia - hora - minuto
short Rebote;      // Antirebote de teclado
int Comando[4];    // Carga de EVENTO y VALOR
int i=0;           // Contador puntero para armar el comando recibido por el bus
char Dia[4];       // Cadena del dia
char Mes[4];       // Cadena del Mes
int TempOut;       // Temperatura remota (afuera)
int Sol;           // Intensidad del sol (remota, afuera)
int EstadoAl;      // Estado de la alarma
int ConfCas;       // El 0 es servicios, el 1 es el automatico, el 2 el modulo web y los demas de reserva
int Tiempo1;       // Tiempo del timer1
int IntLuz[99];    // Arreglo que guarda los niveles de intensidad de cada luz
short Autom[61];   // Arreglo que avisa que luz forma parte del grupo automatico
int Passwd[2];     // Contraseña en RAM
int TpoSilencioso; // Tiempo de silencio antes de sirena
int TpoSalida;     // Tiempo de gracia post activacion

//////////////////////////////////////////////////

void main(){

inicio();

while(1){

restart_wdt(); // reiniciamos el perro

Teclado();
Pantalla();

if (EstadoAl == 1){ // Si la alarma esta desactivada
// Cool! Nada por aqui :P
} else { // La alarma esta activada
if (Menu > 1){
if (Autenticar()) { //autentica ok
EstadoAl = 1; // desactivada
write_eeprom(EstAlarma,EstadoAl);
Menu = 1;
} else { // no autentica
Menu = 0;
} // no autentica
} // Menu mas que 1
} // Alarma activada


if ((Menu == 121) || (Menu == 122) || (Menu == 123)) ActAlarma();
if (Menu == 124) ConfAlarma();
if (Menu == 131) LuzOnOff();
//if (Menu == 132) LuzGrupo();
if (Menu == 133) LuzInt();
if (Menu == 41) Ccasandra();
//if (Menu == 151) CDias();
//if (Menu == 152) ACHs();
//if (Menu == 153) Cluces();
if (Menu == 161) CClave();
if (Menu == 162) CHs();
if (Menu == 163) CReset();
if (Menu == 164) AcercaDe();

} //while
} // Main


void LuzInt(){

int submenu = 33;
short editar = false;
//short ON[99];

while (submenu < 93){ // hasta llenar todas las luces

restart_wdt();

if (input(ARRIBA)==1 && input(ABAJO)==1 && input(OOKK)==1 && input(CANCEL)==1) Rebote = false; // Soltamos las teclas

if (Rebote == false){
if (input(OOKK) == 0){ 
if (editar == false) editar = true;
else editar = false;
Rebote = true;
} // si ok
}

if (Rebote == false){
if (input(CANCEL) == 0){ // salgo al toque con cancel
if (editar == true) editar = false;
else {
Menu = 33;
submenu = 95;
}
Rebote = true;
} // si cancel
}

if (Rebote == false){
if (input(ABAJO) == 0){ // si abajo
if (editar){ // editar habilitado
if ((IntLuz[submenu] != 27) && (IntLuz[submenu] != 127)) IntLuz[submenu] = IntLuz[submenu] + 3;
write_eeprom(submenu,IntLuz[submenu]);
} else { // editar no habilitado
++submenu;
if (submenu == 93) submenu = 33;
}
Rebote = true;
} // si Abajo
} // si rebote


if (Rebote == false){
if (input(ARRIBA) == 0){ // si arriba
if (editar){ // editar habilitado
if ((IntLuz[submenu] != 0 ) && (IntLuz[submenu] != 100 )) IntLuz[submenu] = IntLuz[submenu] - 3;
write_eeprom(submenu,IntLuz[submenu]);
} else { // editar no habilitado
--submenu;
if (submenu == 32) submenu = 92;
}
Rebote = true;
} // si Abajo
} // si rebote

lcd_gotoxy(1,1);
printf(lcd_putc, "= Control de luces =");
lcd_gotoxy(1,2);
if (!editar){ // editar falso
if (bit_test(tiempo1,0)){
printf(lcd_putc, "Intensidad Luz #%02u: ",(submenu-32));
} else printf(lcd_putc, "Intensidad Luz    : ");
}else { // editar verdadero
printf(lcd_putc, "Intensidad Luz #%02u: ",(submenu-32));
}
lcd_gotoxy(1,3);
if (editar) { // si editar prendido
if (bit_test(tiempo1,0)){
if (IntLuz[submenu] > 80){ // La luz esta prendida
printf(lcd_putc, "         %u%%        ",( ( 30 - (IntLuz[submenu]-100) ) / 3 ) * 10);
} else { // Luz apagada
printf(lcd_putc, "         %u%%        ",( ( 30 - (IntLuz[submenu]) ) / 3 ) * 10);
}
} else { // si bit si
printf(lcd_putc, "                    ");
}
} else {  // Editar apagado
if (IntLuz[submenu] > 80){ // La luz esta prendida
printf(lcd_putc, "         %u%%        ",( ( 30 - (IntLuz[submenu]-100) ) / 3 ) * 10);
} else { // luz apagada
printf(lcd_putc, "         %u%%        ",( ( 30 - (IntLuz[submenu]) ) / 3 ) * 10);
}
} // else editar (apagado)


} // dentro de while



} // fn

void LuzOnOff(){

int submenu = 33;

while (submenu < 93){ // hasta llenar todas las luces

restart_wdt();

if (input(ARRIBA)==1 && input(ABAJO)==1 && input(OOKK)==1 && input(CANCEL)==1) Rebote = false; // Soltamos las teclas

if (Rebote == false){
if (input(OOKK) == 0){ // si ok, solo sumo
if (IntLuz[submenu] > 80){ // La luz esta prendida
IntLuz[submenu] = IntLuz[submenu] - 100; // (la apagamos en ram)
write_eeprom(submenu,IntLuz[submenu]);
delay_ms(1);
printf("%c%c%c%c", 250, submenu, 80, submenu + 80); // La apagamos en la red
} else { // La luz esta apagada
IntLuz[submenu] = IntLuz[submenu] + 100; // (la prendemos en ram)
write_eeprom(submenu,IntLuz[submenu]);
delay_ms(1);
printf("%c%c%c%c", 250, submenu, 90, submenu + 90); // La prendemos en la red
}
Rebote = true;
} // si ok
}

if (Rebote == false){
if (input(CANCEL) == 0){ // salgo al toque con cancel
Rebote = true;
Menu = 31;
submenu = 95;
} // si cancel
}

if (Rebote == false){
if (input(ABAJO) == 0){ // si abajo
Rebote = true;
++submenu;
if (submenu == 93) submenu = 33;
} // si Abajo
} // si rebote

if (Rebote == false){
if (input(ARRIBA) == 0){ // si abajo
Rebote = true;
--submenu;
if (submenu == 32) submenu = 92;
} // si Abajo
} // si rebote


lcd_gotoxy(1,1);
printf(lcd_putc, "= Control de luces =");
lcd_gotoxy(1,2);
printf(lcd_putc, " Estado de Luz #%02u: ",(submenu-32));
lcd_gotoxy(1,3);
if (IntLuz[submenu] > 80){ // La luz esta prendida
if (bit_test(tiempo1,0)) printf(lcd_putc, "     ENCENDIDA      ");
else printf(lcd_putc, "                    ");
lcd_gotoxy(1,4);
printf(lcd_putc, "  Intensidad: %u%%  ",( ( 30 - (IntLuz[submenu]-100) ) / 3 ) * 10);
} else {
if (bit_test(tiempo1,0)) printf(lcd_putc, "      APAGADA       ");
else printf(lcd_putc, "                    ");
lcd_gotoxy(1,4);
printf(lcd_putc, "  Intensidad: %u%%  ",( ( 30 - (IntLuz[submenu]) ) / 3 ) * 10);
}

} // dentro de while
} // fn


void ActAlarma(){

LIMPIARLCD;

int submenu = 1;
int segu; // Auxiliar para contar los segundos
int tpoo = (TpoSalida + 1); // tiempo para mostrar

while (submenu < 3){ // hasta llenar todo

if (input(ARRIBA)==1 && input(ABAJO)==1 && input(OOKK)==1 && input(CANCEL)==1) Rebote = false; // Soltamos las teclas

if (Rebote == false){
if (input(OOKK) == 0){ // si ok, solo sumo
if (submenu == 1) ++submenu;
Rebote = true;
} // si ok
}

if (Rebote == false){
if (input(CANCEL) == 0){ // si cancel solo resto o salgo con 10
if (submenu == 1) --submenu;
Rebote = true;
if (submenu == 0) {
submenu=10;
Menu = 21; // para salir con el cancel o el error
}
} // si cancel
}

if (submenu == 1) {
lcd_gotoxy(1,2);
printf(lcd_putc, "   %cDesea activar  ",143);
lcd_gotoxy(1,3);
if (Menu == 121) printf(lcd_putc, "   alarma TOTAL ?    ");
if (Menu == 122) printf(lcd_putc, "  alarma NOCTURNA?  ");
if (Menu == 123) printf(lcd_putc, "  alarma EXTERIOR?  ");
} // cuando submenu es 1 (antes de aceptar)

if (submenu == 2) {
//EstadoAl = 2;
lcd_gotoxy(1,2);
printf(lcd_putc, "  Armado de alarma  ");
lcd_gotoxy(1,3);
printf(lcd_putc, "      en: %3u       ",tpoo);

if (Menu == 121) { // TOTAL
if (tpoo > 10) printf("%c%c%c%c", 250, 100, 121, 221); // Todas oscilan durante activacion de alarma total
if (tpoo < 10) printf("%c%c%c%c", 250, 100, 122, 222); // Todas oscilan durante activacion de alarma total
}

if ((Menu == 122) || (Menu == 123)) { // Nocturna o Exterior
if (tpoo > 10) printf("%c%c%c%c", 250, LHall, 121, LHall+121); // Todas oscilan durante activacion de alarma total
if (tpoo < 10) printf("%c%c%c%c", 250, LHall, 122, LHall+122); // Todas oscilan durante activacion de alarma total
}

if (sec != segu){
segu = sec;
--tpoo;
}
} // cuando submenu es 2 (Alarma ya aceptada)


if (tpoo == 0) submenu = 3;
restart_wdt();
} // dentro de while

if (submenu == 3){ // si es 3 es porque se activo, sino seria 10

if (Menu == 121) { // TOTAL
EstadoAl = 3;
write_eeprom(EstAlarma,EstadoAl);
delay_ms(1);
printf("%c%c%c%c", 250, 100, 80, 180); // Apago todo
}

if (Menu == 122) { // Nocturna
EstadoAl = 4;
write_eeprom(EstAlarma,EstadoAl);
delay_ms(1);
int aux1;
for (aux1=57;aux1<95;aux1++){ // llena todo desde el 57 al 99 (luces de modulos 3, 4 y 5)
printf("%c%c%c%c", 250, aux1, 80, aux1+80); // Apago todo
delay_ms(2);
restart_wdt();
}
}

if (Menu == 123) { // Exterior
EstadoAl = 5;
write_eeprom(EstAlarma,EstadoAl);
delay_ms(1);
int aux1;
for (aux1=80;aux1<95;aux1++){ // llena todo desde el 80 al 99 (luces de modulo 5)
printf("%c%c%c%c", 250, aux1, 80, aux1+80); // Apago todo
delay_ms(2);
restart_wdt();
}
}
Menu = 0;
} // resumen de activacion

} // Fn




void ConfAlarma(){

LIMPIARLCD;

int submenu = 1;
int TiemSal;
int TiemSil;
int tpoo;
int diff;
short prueba;
char test[4];

TiemSal = TpoSalida;
TiemSil = TpoSilencioso;
prueba = false;


while (submenu < 4){ // hasta llenar todo


if (input(ARRIBA)==1 && input(ABAJO)==1 && input(OOKK)==1 && input(CANCEL)==1) Rebote = false; // Soltamos las teclas

if (Rebote == false){
if (input(OOKK) == 0){ // si ok, solo sumo
++submenu;
Rebote = true;
} // si ok
}

if (Rebote == false){
if (input(CANCEL) == 0){ // si cancel solo resto o salgo con 10
--submenu;
Rebote = true;
if (submenu == 0) {
submenu=10;
Menu = 24; // para salir con el cancel o el error
}
} // si cancel
}

if (Rebote == false){
if (input(ABAJO) == 0){ // si arriba
Rebote = true;

   if (submenu == 1) { // arriba dentro de dia de la semana
         ++TiemSal;
         if (TiemSal == 181) TiemSal = 1;
   } // arriba dentro de mes

   if (submenu == 2) { // arriba dentro de mes
         ++TiemSil;
         if (TiemSil == 181)  TiemSil= 1;
   } // arriba dentro de mes

   if (submenu == 3) { // arriba dentro de dia
         prueba=True;
         tpoo = sec;
         test="ON";
         printf("%c%c%c%c", 250, 155, 3, 158); // Prendo la sirena por 3 segundos
         }
} // si Abajo
} // si rebote

if (Rebote == false){
if (input(ARRIBA) == 0){ // si abajo
Rebote = true;

   if (submenu == 1) { // arriba dentro de dia de la semana
         --TiemSal;
         if (TiemSal == 0) TiemSal = 180;
   } // arriba dentro de mes

   if (submenu == 2) { // arriba dentro de mes
         --TiemSil;
         if (TiemSil == 0)  TiemSil= 180;
   } // arriba dentro de mes

   if (submenu == 3) { // arriba dentro de dia
         prueba=True;
         tpoo = sec;
         test="ON";
         printf("%c%c%c%c", 250, 155, 3, 158); // Prendo la sirena por 3 segundos
         }
}
}


lcd_gotoxy(1,1);
printf(lcd_putc, "=== Conf. Alarma ===");
lcd_gotoxy(1,2);
if (submenu == 1){
if (bit_test(tiempo1,0)) printf(lcd_putc, "Tpo Salida: %3us", TiemSal);
else printf(lcd_putc, "Tpo Salida:      ");
} else{
lcd_gotoxy(1,2);
printf(lcd_putc, "Tpo Salida: %3us  ", TiemSal);
}

lcd_gotoxy(1,3);
if (submenu == 2){
if (bit_test(tiempo1,0)) printf(lcd_putc, "Tpo Silencio: %3us",TiemSil);
else printf(lcd_putc, "Tpo Silencio:       ");
} else{
lcd_gotoxy(1,3);
printf(lcd_putc, "Tpo Silencio: %3us",TiemSil);
}

lcd_gotoxy(1,4);
if (submenu == 3){
if (bit_test(tiempo1,0)) printf(lcd_putc, "Prueba sirena: %s  ",test);
else printf(lcd_putc, "Prueba sirena:        ");
} else {
lcd_gotoxy(1,4);
 printf(lcd_putc, "Prueba sirena: %s",test);
}

restart_wdt();

diff = sec - tpoo;

if (diff > 2) prueba = false;
if (prueba == false) test = "OFF";

} // dentro de while

if (submenu == 4) {
TpoSilencioso = TiemSil;  // Cargamos en RAM
TpoSalida = TiemSal;  // Cargamos en RAM

write_eeprom(TpoSil,TpoSilencioso); // Guardamos el valor 
write_eeprom(TpoSal,TpoSalida); // Guardamos el valor 
Menu = 1;
}
} // fn


int Autenticar(){

LIMPIARLCD;

int PassCheck[2];

PassCheck[0] = PassCheck[1] = 0;

int submenu = 1;

while (submenu < 7){
restart_wdt();

if (input(ARRIBA)==1 && input(ABAJO)==1 && input(OOKK)==1 && input(CANCEL)==1) Rebote = false; // Soltamos las teclas

if (Rebote == False) {
if (input(OOKK) == 0){
Rebote = True;
switch (submenu){
   case 1:
   bit_clear(PassCheck[0],0);
   bit_set(PassCheck[0],1);
   //++submenu;
   break;

   case 2:
   bit_clear(PassCheck[0],2);
   bit_set(PassCheck[0],3);
   //++submenu;
   break;

   case 3:
   bit_clear(PassCheck[0],4);
   bit_set(PassCheck[0],5);
   //++submenu;
   break;

   case 4:
   bit_clear(PassCheck[0],6);
   bit_set(PassCheck[0],7);
   //++submenu;
   break;
   
   case 5:
   bit_clear(PassCheck[1],0);
   bit_set(PassCheck[1],1);
   //++submenu;
   break;

   case 6:
   bit_clear(PassCheck[1],2);
   bit_set(PassCheck[1],3);
   //++submenu;
   break;
}
++submenu;
} // si OK
} // rebote falso

if (Rebote == False) {
if (input(CANCEL) == 0){
Rebote = True;
switch (submenu){
   case 1:
   bit_set(PassCheck[0],0);
   bit_set(PassCheck[0],1);
   //++submenu;
   break;

   case 2:
   bit_set(PassCheck[0],2);
   bit_set(PassCheck[0],3);
   //++submenu;
   break;

   case 3:
   bit_set(PassCheck[0],4);
   bit_set(PassCheck[0],5);
   //++submenu;
   break;

   case 4:
   bit_set(PassCheck[0],6);
   bit_set(PassCheck[0],7);
   //++submenu;
   break;

   case 5:
   bit_set(PassCheck[1],0);
   bit_set(PassCheck[1],1);
   //++submenu;
   break;

   case 6:
   bit_set(PassCheck[1],2);
   bit_set(PassCheck[1],3);
   //++submenu;
   break;
} // switch
++submenu;
} // si CANCEL
} // rebote falso


if (Rebote == False) {
if (input(ARRIBA) == 0){
Rebote = True;
switch (submenu){
   case 1:
   bit_clear(PassCheck[0],0);
   bit_clear(PassCheck[0],1);
   //++submenu;
   break;

   case 2:
   bit_clear(PassCheck[0],2);
   bit_clear(PassCheck[0],3);
   //++submenu;
   break;

   case 3:
   bit_clear(PassCheck[0],4);
   bit_clear(PassCheck[0],5);
   //++submenu;
   break;

   case 4:
   bit_clear(PassCheck[0],6);
   bit_clear(PassCheck[0],7);
   //++submenu;
   break;

   case 5:
   bit_clear(PassCheck[1],0);
   bit_clear(PassCheck[1],1);
   //++submenu;
   break;

   case 6:
   bit_clear(PassCheck[1],2);
   bit_clear(PassCheck[1],3);
   //++submenu;
   break;

} // switch
++submenu;
} // si ARRIBA
} // rebote falso


if (Rebote == False) {
if (input(ABAJO) == 0){
Rebote = True;
switch (submenu){
   case 1:
   bit_set(PassCheck[0],0);
   bit_clear(PassCheck[0],1);
   //++submenu;
   break;

   case 2:
   bit_set(PassCheck[0],2);
   bit_clear(PassCheck[0],3);
   //++submenu;
   break;

   case 3:
   bit_set(PassCheck[0],4);
   bit_clear(PassCheck[0],5);
   //++submenu;
   break;

   case 4:
   bit_set(PassCheck[0],6);
   bit_clear(PassCheck[0],7);
   //++submenu;
   break;

   case 5:
   bit_set(PassCheck[1],0);
   bit_clear(PassCheck[1],1);
   //++submenu;
   break;

   case 6:
   bit_set(PassCheck[1],2);
   bit_clear(PassCheck[1],3);
   //++submenu;
   break;

} // switch
++submenu;
} // si CANCEL
} // rebote falso

//lcd_gotoxy(1,1);
//printf(lcd_putc, "== Cambiar Clave ===");
lcd_gotoxy(1,2);
printf(lcd_putc, " Ingrese la clave:  ");

switch (submenu){
case 1:
lcd_gotoxy(7,3);
printf(lcd_putc, "%c_____",199);
break;
case 2:
lcd_gotoxy(7,3);
printf(lcd_putc, "*%c____",199);
break;
case 3:
lcd_gotoxy(7,3);
printf(lcd_putc, "**%c___",199);
break;
case 4:
lcd_gotoxy(7,3);
printf(lcd_putc, "***%c__",199);
break;
case 5:
lcd_gotoxy(7,3);
printf(lcd_putc, "****%c_",199);
break;
case 6:
lcd_gotoxy(7,3);
printf(lcd_putc, "*****%c",199);
break;

} // Sw subm

restart_wdt();


} // while -- todo lleno cuando salgo de aqui

if ((PassCheck[0] == Passwd[0]) && (PassCheck[1] == Passwd[1]))  { // contraseña comprobada ok
LIMPIARLCD;
lcd_gotoxy(1,2);
printf(lcd_putc, "   Clave correcta   ");
lcd_gotoxy(1,3);
printf(lcd_putc, "    Bienvenido :)   ");
restart_wdt();
delay_ms(1000);
return 1;
} else { // contraseña no comprobada ok
LIMPIARLCD;
lcd_gotoxy(1,2);
lcd_gotoxy(1,2);
printf(lcd_putc, "  Clave incorrecta  ");
lcd_gotoxy(1,3);
printf(lcd_putc, " Acceso denegado :( ");
restart_wdt();
delay_ms(1000);
Menu = 1;
return 0;
}
} // fn


void CClave(){
if (Autenticar()){
LIMPIARLCD;

int PassCheck1[2];
int PassCheck2[2];

PassCheck1[0] = PassCheck1[1] = PassCheck2[0] = PassCheck2[1] = 0;

int submenu = 1;

while (submenu < 13){

restart_wdt();

if (input(ARRIBA)==1 && input(ABAJO)==1 && input(OOKK)==1 && input(CANCEL)==1) Rebote = false; // Soltamos las teclas


if (Rebote == False) {
if (input(OOKK) == 0){
Rebote = True;
switch (submenu){
   case 1:
   bit_clear(PassCheck1[0],0);
   bit_set(PassCheck1[0],1);
   //++submenu;
   break;

case 7:
   bit_clear(PassCheck2[0],0);
   bit_set(PassCheck2[0],1);
   //++submenu;
   break;
   case 2:
   bit_clear(PassCheck1[0],2);
   bit_set(PassCheck1[0],3);
   //++submenu;
   break;

   case 8:
   bit_clear(PassCheck2[0],2);
   bit_set(PassCheck2[0],3);
   //++submenu;
   break;

   case 3:
   bit_clear(PassCheck1[0],4);
   bit_set(PassCheck1[0],5);
   //++submenu;
   break;
   case 9:
   bit_clear(PassCheck2[0],4);
   bit_set(PassCheck2[0],5);
   //++submenu;
   break;

   case 4:
   bit_clear(PassCheck1[0],6);
   bit_set(PassCheck1[0],7);
   //++submenu;
   break;
   case 10:
   bit_clear(PassCheck2[0],6);
   bit_set(PassCheck2[0],7);
   //++submenu;
   break;

   case 5:
   bit_clear(PassCheck1[1],0);
   bit_set(PassCheck1[1],1);
   //++submenu;
   break;
   case 11:
   bit_clear(PassCheck2[1],0);
   bit_set(PassCheck2[1],1);
   //++submenu;
   break;

   case 6:
   bit_clear(PassCheck1[1],2);
   bit_set(PassCheck1[1],3);
   //++submenu;
   break;
   case 12:
   bit_clear(PassCheck2[1],2);
   bit_set(PassCheck2[1],3);
   //++submenu;
   break;
}
++submenu;
} // si OK
} // rebote falso

if (Rebote == False) {
if (input(CANCEL) == 0){
Rebote = True;
switch (submenu){
   case 1:
   bit_set(PassCheck1[0],0);
   bit_set(PassCheck1[0],1);
   //++submenu;
   break;
   case 7:
   bit_set(PassCheck2[0],0);
   bit_set(PassCheck2[0],1);
   //++submenu;
   break;

   case 2:
   bit_set(PassCheck1[0],2);
   bit_set(PassCheck1[0],3);
   //++submenu;
   break;
   case 8:
   bit_set(PassCheck2[0],2);
   bit_set(PassCheck2[0],3);
   //++submenu;
   break;

   case 3:
   bit_set(PassCheck1[0],4);
   bit_set(PassCheck1[0],5);
   //++submenu;
   break;
   case 9:
   bit_set(PassCheck2[0],4);
   bit_set(PassCheck2[0],5);
   //++submenu;
   break;

   case 4:
   bit_set(PassCheck1[0],6);
   bit_set(PassCheck1[0],7);
   //++submenu;
   break;
   case 10:
   bit_set(PassCheck2[0],6);
   bit_set(PassCheck2[0],7);
   //++submenu;
   break;

   case 5:
   bit_set(PassCheck1[1],0);
   bit_set(PassCheck1[1],1);
   //++submenu;
   break;
   case 11:
   bit_set(PassCheck2[1],0);
   bit_set(PassCheck2[1],1);
   //++submenu;
   break;

   case 6:
   bit_set(PassCheck1[1],2);
   bit_set(PassCheck1[1],3);
   //++submenu;
   break;
   case 12:
   bit_set(PassCheck2[1],2);
   bit_set(PassCheck2[1],3);
   //++submenu;
   break;
} // switch
++submenu;
} // si CANCEL
} // rebote falso


if (Rebote == False) {
if (input(ARRIBA) == 0){
Rebote = True;
switch (submenu){
   case 1:
   bit_clear(PassCheck1[0],0);
   bit_clear(PassCheck1[0],1);
   //++submenu;
   break;
   case 7:
   bit_clear(PassCheck2[0],0);
   bit_clear(PassCheck2[0],1);
   //++submenu;
   break;

   case 2:
   bit_clear(PassCheck1[0],2);
   bit_clear(PassCheck1[0],3);
   //++submenu;
   break;
   case 8:
   bit_clear(PassCheck2[0],2);
   bit_clear(PassCheck2[0],3);
   //++submenu;
   break;

   case 3:
   bit_clear(PassCheck1[0],4);
   bit_clear(PassCheck1[0],5);
   //++submenu;
   break;
   case 9:
   bit_clear(PassCheck2[0],4);
   bit_clear(PassCheck2[0],5);
   //++submenu;
   break;

   case 4:
   bit_clear(PassCheck1[0],6);
   bit_clear(PassCheck1[0],7);
   //++submenu;
   break;
   case 10:
   bit_clear(PassCheck2[0],6);
   bit_clear(PassCheck2[0],7);
   //++submenu;
   break;

   case 5:
   bit_clear(PassCheck1[1],0);
   bit_clear(PassCheck1[1],1);
   //++submenu;
   break;
   case 11:
   bit_clear(PassCheck2[1],0);
   bit_clear(PassCheck2[1],1);
   //++submenu;
   break;

   case 6:
   bit_clear(PassCheck1[1],2);
   bit_clear(PassCheck1[1],3);
   //++submenu;
   break;
   case 12:
   bit_clear(PassCheck2[1],2);
   bit_clear(PassCheck2[1],3);
   //++submenu;
   break;
} // switch
++submenu;
} // si ARRIBA
} // rebote falso


if (Rebote == False) {
if (input(ABAJO) == 0){
Rebote = True;
switch (submenu){
   case 1:
   bit_set(PassCheck1[0],0);
   bit_clear(PassCheck1[0],1);
   //++submenu;
   break;
   case 7:
   bit_set(PassCheck2[0],0);
   bit_clear(PassCheck2[0],1);
   //++submenu;
   break;

   case 2:
   bit_set(PassCheck1[0],2);
   bit_clear(PassCheck1[0],3);
   //++submenu;
   break;
   case 8:
   bit_set(PassCheck2[0],2);
   bit_clear(PassCheck2[0],3);
   //++submenu;
   break;

   case 3:
   bit_set(PassCheck1[0],4);
   bit_clear(PassCheck1[0],5);
   //++submenu;
   break;
   case 9:
   bit_set(PassCheck2[0],4);
   bit_clear(PassCheck2[0],5);
   //++submenu;
   break;

   case 4:
   bit_set(PassCheck1[0],6);
   bit_clear(PassCheck1[0],7);
   //++submenu;
   break;
   case 10:
   bit_set(PassCheck2[0],6);
   bit_clear(PassCheck2[0],7);
   //++submenu;
   break;

   case 5:
   bit_set(PassCheck1[1],0);
   bit_clear(PassCheck1[1],1);
   //++submenu;
   break;
   case 11:
   bit_set(PassCheck2[1],0);
   bit_clear(PassCheck2[1],1);
   //++submenu;
   break;

   case 6:
   bit_set(PassCheck1[1],2);
   bit_clear(PassCheck1[1],3);
   //++submenu;
   break;
   case 12:
   bit_set(PassCheck2[1],2);
   bit_clear(PassCheck2[1],3);
   //++submenu;
   break;
} // switch
++submenu;
} // si CANCEL
} // rebote falso

lcd_gotoxy(1,1);
printf(lcd_putc, "== Cambiar Clave ===");
lcd_gotoxy(1,2);
printf(lcd_putc, "  Nueva: ");
if (submenu > 6) {
lcd_gotoxy(1,3);
printf(lcd_putc, " Repita: ");
}

switch (submenu){
case 1:
lcd_gotoxy(10,2);
printf(lcd_putc, "%c_____",199);
break;
case 2:
lcd_gotoxy(10,2);
printf(lcd_putc, "*%c____",199);
break;
case 3:
lcd_gotoxy(10,2);
printf(lcd_putc, "**%c___",199);
break;
case 4:
lcd_gotoxy(10,2);
printf(lcd_putc, "***%c__",199);
break;
case 5:
lcd_gotoxy(10,2);
printf(lcd_putc, "****%c_",199);
break;
case 6:
lcd_gotoxy(10,2);
printf(lcd_putc, "*****%c",199);
break;

case 7:
lcd_gotoxy(10,2);
printf(lcd_putc, "******");
lcd_gotoxy(10,3);
printf(lcd_putc, "%c_____",199);
break;
case 8:
lcd_gotoxy(10,3);
printf(lcd_putc, "*%c____",199);
break;
case 9:
lcd_gotoxy(10,3);
printf(lcd_putc, "**%c___",199);
break;
case 10:
lcd_gotoxy(10,3);
printf(lcd_putc, "***%c__",199);
break;
case 11:
lcd_gotoxy(10,3);
printf(lcd_putc, "****%c_",199);
break;
case 12:
lcd_gotoxy(10,3);
printf(lcd_putc, "*****%c",199);
break;
} // Sw subm

restart_wdt();


} // while -- todo lleno cuando salgo de aqui

if (submenu == 13){
if ((PassCheck1[0] == PassCheck2[0]) && (PassCheck1[1] == PassCheck2[1]))  { // contraseña comprobada ok
LIMPIARLCD;
lcd_gotoxy(1,2);
printf(lcd_putc, "  Clave modificada  ");
lcd_gotoxy(1,3);
printf(lcd_putc, "  correctamente :)  ");

Passwd[0] = PassCheck1[0];  // Contraseña a RAM
Passwd[1] = PassCheck1[1];  // Contraseña a RAM

write_eeprom(Password,Passwd[0]);  // Contraseña1 de RAM a ROM
delay_ms(10);
restart_wdt();
write_eeprom(Password + 1,Passwd[1]);  // Contraseña2 de RAM a ROM
delay_ms(1000);
Menu = 1;
} else { // contraseña no comprobada ok
LIMPIARLCD;
lcd_gotoxy(1,2);
printf(lcd_putc, "  Error: Las claves ");
lcd_gotoxy(1,3);
printf(lcd_putc, "   no coinciden :(  ");
restart_wdt();
delay_ms(1000);
Menu = 1;
}
} // if 13
} // si autenticamos
} // fn

void Ccasandra(){

char sServ[3];
char sAuto[3];
char sWeb[3];

if (bit_test(ConfCas,0)) sServ = "SI";
else sServ = "NO";
if (bit_test(ConfCas,1)) sAuto = "SI";
else sAuto = "NO";
if (bit_test(ConfCas,2)) sWeb = "SI";
else sWeb = "NO";

int submenu =1;

while (submenu < 4){

if (input(ARRIBA)==1 && input(ABAJO)==1 && input(OOKK)==1 && input(CANCEL)==1) Rebote = false; // Soltamos las teclas

if (Rebote == False) {
if (input(OOKK) == 0){
Rebote = true;
++submenu;
}
}

if (Rebote == False) {
if (input(CANCEL) == 0){
Rebote = true;
--submenu;
if (submenu == 0){
submenu = 5;
Menu = 4;
}
}
}

if (Rebote == False) {
if ((input(ABAJO) == 0) || (input(ARRIBA)) == 0) { // si arriba o abajo togleo
Rebote = true;
   if (submenu == 1) { // dentro de SERV
         if (bit_test(ConfCas,0)){
         bit_clear(ConfCas,0);
         sServ = "NO";
         }
         else {
         bit_set(ConfCas,0);
         sServ = "SI";
         }
   } // arriba dentro de mes

   if (submenu == 2) { // dentro de AUTO
         if (bit_test(ConfCas,1)){
         bit_clear(ConfCas,1);
         sAuto = "NO";
         }
         else {
         bit_set(ConfCas,1);
         sAuto = "SI";
         }
   } // arriba dentro de mes

   if (submenu == 3) { // Dentro de Web
         if (bit_test(ConfCas,2)){
         bit_clear(ConfCas,2);
         sWeb = "NO";
         }
         else {
         bit_set(ConfCas,2);
         sWeb = "SI";
         }
   } // arriba dentro de dia
} // si arriba o abajo
} // rebote falso


lcd_gotoxy(1,1);
printf(lcd_putc, "== Conf. Casandra ==");
lcd_gotoxy(1,2);
printf(lcd_putc, " Luz Pasillos: ");
lcd_gotoxy(1,3);
printf(lcd_putc, " Grupo Automa: ");
lcd_gotoxy(1,4);
printf(lcd_putc, " Ctrl celular: ");

lcd_gotoxy(16,2);
if (submenu == 1) {
   if (bit_test(tiempo1,0)){
      printf(lcd_putc, " %s  ", sServ);
   } else printf(lcd_putc, "   ");
} else printf(lcd_putc, " %s  ", sServ);

lcd_gotoxy(16,3);
if (submenu == 2) {
   if (bit_test(tiempo1,0)){
      printf(lcd_putc, " %s  ", sAuto);
   } else printf(lcd_putc, "   ");
} else printf(lcd_putc, " %s  ", sAuto);

lcd_gotoxy(16,4);
if (submenu == 3) {
   if (bit_test(tiempo1,0)){
      printf(lcd_putc, " %s  ", sWeb);
   } else printf(lcd_putc, "   ");
} else printf(lcd_putc, " %s  ", sWeb);

restart_wdt();

} // while -- todo lleno cuando salgo de aqui

if (submenu == 4){
write_eeprom(EstCasandra,ConfCas);
delay_ms(5);

if (bit_test(ConfCas,2)){ // Webserver activado
printf("%c%c%c%c", 250, 150, 90, 150 + 90); //PRENDO
delay_ms(5);
printf("%c%c%c%c", 250, 150, 90, 150 + 90); //PRENDO
delay_ms(5);
} else { // WebServer desactivado
printf("%c%c%c%c", 250, 150, 80, 150 + 80); //APAGO
delay_ms(5);
printf("%c%c%c%c", 250, 150, 80, 150 + 80); //APAGO
delay_ms(5);
}
Menu = 1;
} 
} // Fn

void CReset(){

short Eleccion = True;

if (Autenticar()){

while (Eleccion){

if (input(ARRIBA)==1 && input(ABAJO)==1 && input(OOKK)==1 && input(CANCEL)==1) Rebote = false; // Soltamos las teclas

if (Rebote == false) {

lcd_gotoxy(1,1);
printf(lcd_putc, "= RESETEAR SISTEMA =");
lcd_gotoxy(1,2);
printf(lcd_putc, "%cSe eliminaran todos",165);
lcd_gotoxy(1,3);
printf(lcd_putc, "los datos guardados!");
lcd_gotoxy(1,4);
printf(lcd_putc, "    %cContinuar?    ",143);

if (bit_test(Tiempo1,1)) ONLCDLED;
else OFFLCDLED;


if (input(ARRIBA)==0 || input(ABAJO)==0 || input(CANCEL)==0){
Rebote = True;
Menu = 1;
Eleccion = False;
}
 
if (input(OOKK)==0){  ///////////////////////////////// Destruir todo YA!
Rebote = True;
LIMPIARLCD; // Limpiamos la pantalla
ONLCDLED;

lcd_gotoxy(1,2);
printf(lcd_putc, " Eliminando datos...");

int aux1;
int aux2;

for (aux1=0;aux1<5;aux1++){ // llena todo desde el 0 al 4
TempMax[aux1]=0;    // Temperatura maxima de la semana - dia - hora - minuto
TempMin[aux1]=0;    // Temperatura minima de la semana - dia - hora - minuto 
SolMax[aux1]=0;     // Maximo nivel de radiacion de sol en la semana - dia - hora - minuto
Comando[aux1]=0;    // Carga de EVENTO y VALOR
}

for (aux2=0;aux2<255;aux2++){ // llena todo desde el 0 al 255
write_eeprom(aux2,0x00);  // la llenamos con 0
delay_ms(2);
restart_wdt();
}

EstadoAl=1;      // Estado de la alarma
ConfCas=0;       // Estado del nivel de penetracion de Casandra (apagado todo)

/*
port_b_pullups(true);
setup_wdt(WDT_ON);
enable_interrupts(global);
enable_interrupts(int_rda); // Interrupcion de llegada de datos
enable_interrupts(INT_TIMER1); // Interrupcion por timer 1
setup_timer_1(T1_INTERNAL | T1_DIV_BY_8);
set_timer1(0);
*/
ds1307_set_date_time(1,1,1,1,0,0,0);  // Inicio de valores para el DS1307
delay_ms(5);
Menu = 1;      // Posicion dentro del menu 0
Eleccion = False;
} // If eliminar todo confirmado
} // si rebote es falso
} // Salimos del while con eleccion
} // si autenticamos correctamente
} // Fn

void CHs(){
int mes=month;
int dia=day;
int dias=dow;
int hora=hrs;
int minuto=min;
int anio=year;
char sdia[11];
char smes[4];


int submenu=1;

Rebote = true;
lcd_putc("\f"); // Limpiamos la pantalla

while (submenu < 6){ // hasta llenar todo


if (input(ARRIBA)==1 && input(ABAJO)==1 && input(OOKK)==1 && input(CANCEL)==1) Rebote = false; // Soltamos las teclas

if (Rebote == false){
if (input(OOKK) == 0){ // si ok, solo sumo
++submenu;
Rebote = true;
} // si ok
}

if (Rebote == false){
if (input(CANCEL) == 0){ // si cancel solo resto o salgo con 10
--submenu;
Rebote = true;
if (submenu == 0) {
submenu = 10;
}
} // si cancel
}

if (Rebote == false){
if (input(ABAJO) == 0){ // si arriba
Rebote = true;

   if (submenu == 1) { // arriba dentro de dia de la semana
         ++dias;
         if (dias == 8) dias = 1;
   } // arriba dentro de mes

   if (submenu == 2) { // arriba dentro de mes
         ++mes;
         if (mes == 13) mes = 1;
   } // arriba dentro de mes

   if (submenu == 3) { // arriba dentro de dia
         ++dia;
         if ((dia >= 32) && ((mes == 1) || (mes == 3) || (mes == 5) || (mes == 7) || (mes == 8) || (mes == 10) || (mes == 12))) dia = 1;
         if ((dia >= 29) && (mes == 2)) dia = 1;
         if ((dia >= 31) && ((mes == 4) || (mes == 6) || (mes == 9) || (mes == 11))) dia = 1;
   } // arriba dentro de dia

   if (submenu == 4) { // arriba dentro de hora
         ++hora;
         if (hora == 24) hora = 0;
   } // arriba dentro de hora

   if (submenu == 5) { // arriba dentro de minuto
         ++minuto;
         if (minuto == 60) minuto = 0;
   } // arriba dentro de minuto
}
}

if (Rebote == false){
if (input(ARRIBA) == 0){ // si abajo
Rebote = true;

   if (submenu == 1) { // abajo dentro de mes
         --dias;
         if (dias == 0) dias = 7;
   } // arriba dentro de mes

   if (submenu == 2) { // abajo dentro de mes
         --mes;
         if (mes == 0) mes = 12;
   } // arriba dentro de mes

   if (submenu == 3) { // arriba dentro de dia
         --dia;
         if ((dia == 0) && ((mes == 1) || (mes == 3) || (mes == 5) || (mes == 7) || (mes == 8) || (mes == 10) || (mes == 12))) dia = 31;
         if ((dia == 0) && (mes == 2)) dia = 28;
         if ((dia == 0) && ((mes == 4) || (mes == 6) || (mes == 9) || (mes == 11))) dia = 30;
   } // arriba dentro de dia

   if (submenu == 4) { // arriba dentro de hora
         --hora;
         if (hora == 255) hora = 23;
   } // arriba dentro de hora

   if (submenu == 5) { // arriba dentro de minuto
         --minuto;
         if (minuto == 255) minuto = 59;
   } // arriba dentro de minuto

}
}

switch (dias){
   case 1:
   sdia="Lunes    ";
   break;

   case 2:
   sdia="Martes   ";
   break;

   case 3:
   sdia="Miercoles";
   break;

   case 4:
   sdia="Jueves   ";
   break;

   case 5:
   sdia="Viernes  ";
   break;

   case 6:
   sdia="Sabado   ";
   break;

   case 7:
   sdia="Domingo  ";
   break;
}

switch (mes){
   case 1:
   smes="Ene";
   break;

   case 2:
   smes="Feb";
   break;

   case 3:
   smes="Mar";
   break;

   case 4:
   smes="Abr";
   break;

   case 5:
   smes="May";
   break;

   case 6:
   smes="Jun";
   break;

   case 7:
   smes="Jul";
   break;

   case 8:
   smes="Ago";
   break;

   case 9:
   smes="Sep";
   break;

   case 10:
   smes="Oct";
   break;

   case 11:
   smes="Nov";
   break;

   case 12:
   smes="Dic";
   break;
}

lcd_gotoxy(1,1);
printf(lcd_putc, "=== Fecha y hora ===");

lcd_gotoxy(1,2);
if (submenu == 1){
if (bit_test(tiempo1,0)) printf(lcd_putc, "   Dia: %s ", sdia);
else printf(lcd_putc, "   Dia:              ");
} else{
lcd_gotoxy(1,2);
printf(lcd_putc, "   Dia: %s ", sdia);
}

lcd_gotoxy(1,3);
if (submenu == 3){
if (bit_test(tiempo1,0)) printf(lcd_putc, " Nro: %02u   ",dia);
else printf(lcd_putc, " Nro:      ");
} else
{
lcd_gotoxy(1,3);
printf(lcd_putc, " Nro: %02u   ",dia);
}

lcd_gotoxy(11,3);
if (submenu == 2){
if (bit_test(tiempo1,0)) printf(lcd_putc, "Mes: %s",smes);
else printf(lcd_putc, "Mes:    ");
} else {
lcd_gotoxy(11,3);
printf(lcd_putc, "Mes: %s",smes);
}

lcd_gotoxy(1,4);
if (submenu == 4){
if (bit_test(tiempo1,0)) printf(lcd_putc, "Hora: %02u ",hora);
else printf(lcd_putc, "Hora:    ");
} else {
lcd_gotoxy(1,4);
printf(lcd_putc, "Hora: %02u ",hora);
}

lcd_gotoxy(10,4);
if (submenu == 5){
if (bit_test(tiempo1,0)) printf(lcd_putc, "Minutos: %02u",minuto);
else printf(lcd_putc, "Minutos:   ");
} else {
lcd_gotoxy(10,4);
printf(lcd_putc, "Minutos: %02u",minuto);
}
restart_wdt();

} // todo lleno cuando salgo de aqui

if (submenu == 10) Menu = 62;
if (submenu == 6) {
Menu = 1;
ds1307_set_date_time(dia,mes,anio,dias,hora,minuto,0);
}
}

void inicio(){  /////////////// INICIO //////////////////////
//// Pullups para el teclado ////
port_b_pullups(true);

/////////  Inicio el WatchDog  ///////////////
setup_wdt(WDT_ON);

//// Interrupciones /////
enable_interrupts(global);
//disable_interrupts(global);
enable_interrupts(int_rda); // Interrupcion de llegada de datos
enable_interrupts(INT_TIMER1); // Interrupcion por timer 1

////// Inicio de dispositivos //////
DHT11_init();
DS1307_init();
lcd_init();

/////////////////////// Arrancamos el timer 1 para medir tiempos internos ////////////
setup_timer_1(T1_INTERNAL | T1_DIV_BY_8);
set_timer1(0);


////// Inicio de variables ///////////
Menu = 1;      // Posicion dentro del menu 0
Tiempo1=0; // Contador de tiempos internos larga en 0
TempOut=40;    // Temperatura remota (afuera)
Sol=100;       // Intensidad del sol (remota, afuera)
Rebote = false;    // Teclado no presionado
EstadoAl = read_eeprom(EstAlarma);  // Leo el tiempo para salir
TpoSilencioso = read_eeprom(TpoSil);  // Leo el tiempo silencioso
TpoSalida = read_eeprom(TpoSal);  // Leo el tiempo para salir
Passwd[0] = read_eeprom(Password);  // Contraseña1 de ROM a RAM
Passwd[1] = read_eeprom(Password + 1);  // Contraseña2 de ROM a RAM

restart_wdt();

////////////// Recuperamos intensidades de EEPROM /////////////////
int aux1;
for (aux1=32;aux1<93;aux1++){ // llena todo desde el 32 al 93 
//IntLuz[aux1] = read_eeprom(aux1);
IntLuz[aux1] = 15;
delay_ms(1);
if (IntLuz[aux1] > 80) { // La luz estaba encendida
printf("%c%c%c%c", 250, aux1, (IntLuz[aux1]-100), aux1+(IntLuz[aux1]-100)); // Le cargo la intensidad
printf("%c%c%c%c", 250, aux1, 90, aux1+90); // La enciendo
} else{ // La luz estaba apagada
printf("%c%c%c%c", 250, aux1, (IntLuz[aux1]), aux1+(IntLuz[aux1])); // Le cargo la intensidad
}
restart_wdt();
}


LIMPIARLCD; // Limpiamos la pantalla

/*while(1){  ///////////////////// Impresion de caracteres
int kkk;

for(kkk=0;kkk<255;++kkk){
   lcd_gotoxy(1,1);
   printf(lcd_putc, "(%03u)%c (%03u)%c (%03u)%c",kkk,kkk,kkk+1,kkk+1,kkk+2,kkk+2);
   lcd_gotoxy(1,2);
   printf(lcd_putc, "(%03u)%c (%03u)%c (%03u)%c",kkk+3,kkk+3,kkk+4,kkk+4,kkk+5,kkk+5);
   lcd_gotoxy(1,3);
   printf(lcd_putc, "(%03u)%c (%03u)%c (%03u)%c",kkk+6,kkk+6,kkk+7,kkk+7,kkk+8,kkk+8);
   lcd_gotoxy(1,4);
   printf(lcd_putc, "(%03u)%c (%03u)%c (%03u)%c",kkk+9,kkk+9,kkk+10,kkk+10,kkk+11,kkk+11);
delay_ms(2000);
}
*/
}


void DHT11_init()
{
output_float(DHT11_pin);
delay_ms(1000);
}

unsigned char get_byte()
{
unsigned char s=0;
unsigned char value=0;

for(s=0;s<8;s+=1)
{
value<<=1;
while(!input(DHT11_pin));
delay_us(30);

if(input(DHT11_pin))
{
value|=1;
}
while(input(DHT11_pin));
}
return value;
}

unsigned char get_data()
{
short chk=0;
unsigned char s=0;
unsigned char check_sum=0;

output_high(DHT11_pin);
output_low(DHT11_pin);
delay_ms(18);
output_high(DHT11_pin);
delay_us(26);

chk=input(DHT11_pin);
if(chk)
{
return 1;
}
delay_us(80);

chk=input(DHT11_pin);
if(!chk)
{
return 2;
}
delay_us(80);

for(s=0;s<=4;s+=1)
{
values[s]=get_byte();
}

output_high(DHT11_pin);

for(s=0;s<4;s+=1)
{
check_sum+=values[s];
}

if(check_sum!=values[4])
{
return 3;
}
else
{
return 0;
}
}


////////////////////////// INTERRUPCIONES //////////////////////////////
#int_rda
void BusData(){
if (kbhit()){
Comando[i]=getc();
if (Comando[i] == 250) i=0;
else ++i;
if (i==3) Comunica();
}
}

#int_TIMER1
void  TIMER1_isr(void) //Función de interrupción por desbordamiento TMR1  
{
set_timer1(0); //carga del TMR1
Tiempo(); // Tomo el tiempo
if (sec == 30) Ambiente(); // Tomo las variables ambientales (incluidas las remotas con cuidado de no saturar el bus)
++Tiempo1;
}

void Comunica(){
i=0;

if (( (Comando[0]) + (Comando[1]) ) == Comando[2]){ // Prueba de checksum





} // if checksum
} //fn


void Teclado(){

if (input(ARRIBA)==1 && input(ABAJO)==1 && input(OOKK)==1 && input(CANCEL)==1) Rebote = false; // Soltamos las teclas

if (Rebote == false){ // Tomamos el comando ya que el antirebote nos dice que esta ok

switch (Menu){

////////////////////////////// Comienza Menu basico ///////////////////////////
   case 0:
   if (input(ARRIBA)==0 || input(ABAJO)==0 || input(OOKK)==0 || input(CANCEL)==0){
   Holding();
   Rebote = True;
   Menu = 1;
   }
   break;
   
   case 1:  // Resumen ppal
   if (input(OOKK)==0){
   Rebote = True;
   Menu = 2;
   }
   if (input(CANCEL)==0){
   Menu = 0;
   Rebote = True;
   }
   break;
   
   case 2:  // Menu - Activar alarma
   if (input(ARRIBA)==0){
   }
   if (input(ABAJO)==0){
   Rebote = True;
   Menu = 3;
   }
   if (input(OOKK)==0){
   Rebote = True;
   Menu = 21;
   }
   if (input(CANCEL)==0){
   Rebote = True;
   Menu = 1;
   }
   break;
   
   case 3: // Menu - Luces
   if (input(ARRIBA)==0){
   Rebote = True;
   Menu = 2;
   }
   if (input(ABAJO)==0){
   Rebote = True;
   Menu = 4;
   }
   if (input(OOKK)==0){
   Rebote = True;
   Menu = 31;
   }
   if (input(CANCEL)==0){
   Rebote = True;
   Menu = 1;
   }
   break;
   
   case 4: // Menu - Casandra
   if (input(ARRIBA)==0){
   Rebote = True;
   Menu = 3;
   }
   if (input(ABAJO)==0){
   Rebote = True;
   Menu = 5;
   }
   if (input(OOKK)==0){
   Rebote = True;
   Menu = 41;
   }
   if (input(CANCEL)==0){
   Rebote = True;
   Menu = 1;
   }
   break;
   
   case 5: // Menu - Grupo automatico
   if (input(ARRIBA)==0){
   Rebote = True;
   Menu = 4;
   }
   if (input(ABAJO)==0){
   Rebote = True;
   Menu = 6;
   }
   if (input(OOKK)==0){
   Rebote = True;
   Menu = 51;
   }
   if (input(CANCEL)==0){
   Rebote = True;
   Menu = 1;
   }
   break;
   
   case 6: // Menu - Luces
   if (input(ARRIBA)==0){
   Rebote = True;
   Menu = 5;
   }
   if (input(ABAJO)==0){
   }
   if (input(OOKK)==0){
   Rebote = True;
   Menu = 61;
   }
   if (input(CANCEL)==0){
   Rebote = True;
   Menu = 1;
   }
   break;
   


///////////////////////////////////////////// Comienza menu alarma /////////

   case 21: // Menu - ALARMA Total
   if (input(ARRIBA)==0){
   }
   if (input(ABAJO)==0){
   Rebote = True;
   Menu = 22;
   }
   if (input(OOKK)==0){
   Rebote = True;
   Menu = 121;
   }
   if (input(CANCEL)==0){
   Rebote = True;
   Menu = 2;
   }
   break;
   
   case 22: // Menu - Alarma noche suave
   if (input(ARRIBA)==0){
   Rebote = True;
   Menu = 21;
   }
   if (input(ABAJO)==0){
   Rebote = True;
   Menu = 23;
   }
   if (input(OOKK)==0){
   Rebote = True;
   Menu = 122;
   }
   if (input(CANCEL)==0){
   Rebote = True;
   Menu = 2;
   }
   break;
   
   case 23: // Menu - Alarma noche dura
   if (input(ARRIBA)==0){
   Rebote = True;
   Menu = 22;
   }
   if (input(ABAJO)==0){
   Rebote = True;
   Menu = 24;
   }
   if (input(OOKK)==0){
   Rebote = True;
   Menu = 123;
   }
   if (input(CANCEL)==0){
   Rebote = True;
   Menu = 2;
   }
   break;
   
   case 24: // Menu - Alarma conf
   if (input(ARRIBA)==0){
   Rebote = True;
   Menu = 23;
   }
   if (input(ABAJO)==0){
   }
   if (input(OOKK)==0){
   Rebote = True;
   Menu = 124;
   }
   if (input(CANCEL)==0){
   Rebote = True;
   Menu = 2;
   }
   break;
   

///////////////////////////////////////////// Comienza menu de Luces /////////

   case 31: // Menu - Grupo automatico
   if (input(ARRIBA)==0){
   }
   if (input(ABAJO)==0){
   Rebote = True;
   Menu = 32;
   }
   if (input(OOKK)==0){
   Rebote = True;
   Menu = 131;
   }
   if (input(CANCEL)==0){
   Rebote = True;
   Menu = 3;
   }
   break;
   
   case 32: // Menu - Grupo automatico
   if (input(ARRIBA)==0){
   Rebote = True;
   Menu = 31;
   }
   if (input(ABAJO)==0){
   Rebote = True;
   Menu = 33;
   }
   if (input(OOKK)==0){
   Rebote = True;
   Menu = 132;
   }
   if (input(CANCEL)==0){
   Rebote = True;
   Menu = 3;
   }
   break;
   
   case 33: // Menu - Grupo automatico
   if (input(ARRIBA)==0){
   Rebote = True;
   Menu = 32;
   }
   if (input(ABAJO)==0){
   }
   if (input(OOKK)==0){
   Rebote = True;
   Menu = 133;
   }
   if (input(CANCEL)==0){
   Rebote = True;
   Menu = 3;
   }
   break;
   


/*//////////////////////////////////////////// Comienza menu de Casandra /////////

   case 41: // Menu - Grupo automatico
   if (input(ARRIBA)==0){
   }
   if (input(ABAJO)==0){
   Rebote = True;
   Menu = 42;
   }
   if (input(OOKK)==0){
   Rebote = True;
   Menu = 141;
   }
   if (input(CANCEL)==0){
   Rebote = True;
   Menu = 4;
   }
   break;
   
   case 42: // Menu - Grupo automatico
   if (input(ARRIBA)==0){
   Rebote = True;
   Menu = 41;
   }
   if (input(ABAJO)==0){
   Rebote = True;
   Menu = 43;
   }
   if (input(OOKK)==0){
   Rebote = True;
   Menu = 142;
   }
   if (input(CANCEL)==0){
   Rebote = True;
   Menu = 4;
   }
   break;
   
   case 43: // Menu - Grupo automatico
   if (input(ARRIBA)==0){
   Rebote = True;
   Menu = 42;
   }
   if (input(ABAJO)==0){
   Rebote = True;
   Menu = 44;
   }
   if (input(OOKK)==0){
   Rebote = True;
   Menu = 143;
   }
   if (input(CANCEL)==0){
   Rebote = True;
   Menu = 4;
   }
   break;
   
   case 44: // Menu - Grupo automatico
   if (input(ARRIBA)==0){
   Rebote = True;
   Menu = 43;
   }
   if (input(ABAJO)==0){
   }
   if (input(OOKK)==0){
   Rebote = True;
   Menu = 144;
   }
   if (input(CANCEL)==0){
   Rebote = True;
   Menu = 4;
   }
   break;
   
*/

///////////////////////////////////////////// Comienza menu del Automatico /////////

   case 51: // Menu - Grupo automatico
   if (input(ARRIBA)==0){
   }
   if (input(ABAJO)==0){
   Rebote = True;
   Menu = 52;
   }
   if (input(OOKK)==0){
   Rebote = True;
   Menu = 151;
   }
   if (input(CANCEL)==0){
   Rebote = True;
   Menu = 5;
   }
   break;
   
   case 52: // Menu - Grupo automatico
   if (input(ARRIBA)==0){
   Rebote = True;
   Menu = 51;
   }
   if (input(ABAJO)==0){
   Rebote = True;
   Menu = 53;
   }
   if (input(OOKK)==0){
   Rebote = True;
   Menu = 152;
   }
   if (input(CANCEL)==0){
   Rebote = True;
   Menu = 5;
   }
   break;
   
   case 53: // Menu - Grupo automatico
   if (input(ARRIBA)==0){
   Rebote = True;
   Menu = 52;
   }
   if (input(ABAJO)==0){
   }
   if (input(OOKK)==0){
   Rebote = True;
   Menu = 153;
   }
   if (input(CANCEL)==0){
   Rebote = True;
   Menu = 5;
   }
   break;
   

///////////////////////////////////////////// Comienza menu de Configuracion /////////

   case 61: // Menu - Grupo automatico
   if (input(ARRIBA)==0){
   }
   if (input(ABAJO)==0){
   Rebote = True;
   Menu = 62;
   }
   if (input(OOKK)==0){
   Rebote = True;
   Menu = 161;
   }
   if (input(CANCEL)==0){
   Rebote = True;
   Menu = 6;
   }
   break;
   
   case 62: // Menu - Grupo automatico
   if (input(ARRIBA)==0){
   Rebote = True;
   Menu = 61;
   }
   if (input(ABAJO)==0){
   Rebote = True;
   Menu = 63;
   }
   if (input(OOKK)==0){
   Rebote = True;
   Menu = 162;
   }
   if (input(CANCEL)==0){
   Rebote = True;
   Menu = 6;
   }
   break;
   
   case 63: // Menu - Grupo automatico
   if (input(ARRIBA)==0){
   Rebote = True;
   Menu = 62;
   }
   if (input(ABAJO)==0){
   Rebote = True;
   Menu = 64;
   }
   if (input(OOKK)==0){
   Rebote = True;
   Menu = 163;
   }
   if (input(CANCEL)==0){
   Rebote = True;
   Menu = 6;
   }
   break;
   
   case 64: // Menu - Grupo automatico
   if (input(ARRIBA)==0){
   Rebote = True;
   Menu = 63;
   }
   if (input(ABAJO)==0){
   }
   if (input(OOKK)==0){
   Rebote = True;
   Menu = 164;
   }
   if (input(CANCEL)==0){
   Rebote = True;
   Menu = 6;
   }
   break;
   
Pantalla(); // Actualizamos la pantalla

} // switch
} // if del antirebote
} // Fn

void Pantalla(){

switch (Menu){

   case 0:
   output_high(LCDLED);
   lcd_putc("\f"); // Limpiamos la pantalla, por este motivo solo la llamamos cuando es necesario
   break;

   case 1:
//   output_low(LCDLED);
   lcd_gotoxy(1,1);
   printf(lcd_putc, "%c%c%c %02u %c%c%c  %02u:%02u:%02u", Dia[0], Dia[1], Dia[2], day, Mes[0], Mes[1], Mes[2], hrs, min, sec);
   lcd_gotoxy(1,2);
   printf(lcd_putc, " Temp:  %02u%cC / %02u%cC  ", TempIn, 210, TempOut, 210);
   lcd_gotoxy(1,3);
   printf(lcd_putc, " HR: %02u%%   Sol: %3u ", Hum, Sol);
   lcd_gotoxy(1,4);
   if (EstadoAl==1)  printf(lcd_putc, "Alarma: Desactivada ");
   if (EstadoAl==3)  printf(lcd_putc, "Alarma: TOTAL Activa");
   if (EstadoAl==4)  printf(lcd_putc, "Alarma: NOCTURNA Act");
   if (EstadoAl==5)  printf(lcd_putc, "Alarma: EXTERIOR Act");
   break;

   case 2:
//   Tiempo(); // Tomo el tiempo
//   Ambiente(); // Tomo las variables ambientales (incluidas las remotas con cuidado de no saturar el bus)
//   output_low(LCDLED);
   lcd_gotoxy(1,1);
   printf(lcd_putc, "======= MENU =======");
   lcd_gotoxy(1,2);
   printf(lcd_putc, " ~ (1) Alarma       ");
   lcd_gotoxy(1,3);
   printf(lcd_putc, "   (2) Luces        ");
   lcd_gotoxy(1,4);
   printf(lcd_putc, "   (3) Casandra     ");
   break;

   case 3:
//   Tiempo(); // Tomo el tiempo
//   Ambiente(); // Tomo las variables ambientales (incluidas las remotas con cuidado de no saturar el bus)
//   output_low(LCDLED);
   lcd_gotoxy(1,1);
   printf(lcd_putc, "======= MENU =======");
   lcd_gotoxy(1,2);
   printf(lcd_putc, "   (1) Alarma       ");
   lcd_gotoxy(1,3);
   printf(lcd_putc, " ~ (2) Luces        ");
   lcd_gotoxy(1,4);
   printf(lcd_putc, "   (3) Casandra     ");
   break;

   case 4:
//   Tiempo(); // Tomo el tiempo
//   Ambiente(); // Tomo las variables ambientales (incluidas las remotas con cuidado de no saturar el bus)
//   output_low(LCDLED);
   lcd_gotoxy(1,1);
   printf(lcd_putc, "======= MENU =======");
   lcd_gotoxy(1,2);
   printf(lcd_putc, "   (2) Luces        ");
   lcd_gotoxy(1,3);
   printf(lcd_putc, " ~ (3) Casandra     ");
   lcd_gotoxy(1,4);
   printf(lcd_putc, "   (4) Automatico   ");
   break;

   case 5:
//   Tiempo(); // Tomo el tiempo
//   Ambiente(); // Tomo las variables ambientales (incluidas las remotas con cuidado de no saturar el bus)
//   output_low(LCDLED);
   lcd_gotoxy(1,1);
   printf(lcd_putc, "======= MENU =======");
   lcd_gotoxy(1,2);
   printf(lcd_putc, "   (3) Casandra     ");
   lcd_gotoxy(1,3);
   printf(lcd_putc, " ~ (4) Automatico   ");
   lcd_gotoxy(1,4);
   printf(lcd_putc, "   (5) Configuracion");
   break;

   case 6:
//   Tiempo(); // Tomo el tiempo
//   Ambiente(); // Tomo las variables ambientales (incluidas las remotas con cuidado de no saturar el bus)
//   output_low(LCDLED);
   lcd_gotoxy(1,1);
   printf(lcd_putc, "======= MENU =======");
   lcd_gotoxy(1,2);
   printf(lcd_putc, "   (3) Casandra     ");
   lcd_gotoxy(1,3);
   printf(lcd_putc, "   (4) Automatico   ");
   lcd_gotoxy(1,4);
   printf(lcd_putc, " ~ (5) Configuracion");
   break;

   case 21:
//   Tiempo(); // Tomo el tiempo
//   Ambiente(); // Tomo las variables ambientales (incluidas las remotas con cuidado de no saturar el bus)
//   output_low(LCDLED);
   lcd_gotoxy(1,1);
   printf(lcd_putc, "====== Alarma ======");
   lcd_gotoxy(1,2);
   printf(lcd_putc, "~ (1) Activar Total ");
   lcd_gotoxy(1,3);
   printf(lcd_putc, "  (2) Activar Noche ");
   lcd_gotoxy(1,4);
   printf(lcd_putc, "  (3) Activar Afuera");
   break;

   case 22:
//   Tiempo(); // Tomo el tiempo
//   Ambiente(); // Tomo las variables ambientales (incluidas las remotas con cuidado de no saturar el bus)
//   output_low(LCDLED);
   lcd_gotoxy(1,1);
   printf(lcd_putc, "====== Alarma ======");
   lcd_gotoxy(1,2);
   printf(lcd_putc, "  (1) Activar Total ");
   lcd_gotoxy(1,3);
   printf(lcd_putc, "~ (2) Activar Noche ");
   lcd_gotoxy(1,4);
   printf(lcd_putc, "  (3) Activar Afuera");
   break;

   case 23:
//   Tiempo(); // Tomo el tiempo
//   Ambiente(); // Tomo las variables ambientales (incluidas las remotas con cuidado de no saturar el bus)
//   output_low(LCDLED);
   lcd_gotoxy(1,1);
   printf(lcd_putc, "====== Alarma ======");
   lcd_gotoxy(1,2);
   printf(lcd_putc, "  (2) Activar Noche ");
   lcd_gotoxy(1,3);
   printf(lcd_putc, "~ (3) Activar Afuera");
   lcd_gotoxy(1,4);
   printf(lcd_putc, "  (4) Configuracion ");
   break;

   case 24:
//   Tiempo(); // Tomo el tiempo
//   Ambiente(); // Tomo las variables ambientales (incluidas las remotas con cuidado de no saturar el bus)
//   output_low(LCDLED);
   lcd_gotoxy(1,1);
   printf(lcd_putc, "====== Alarma ======");
   lcd_gotoxy(1,2);
   printf(lcd_putc, "  (2) Activar Noche ");
   lcd_gotoxy(1,3);
   printf(lcd_putc, "  (3) Activar Afuera");
   lcd_gotoxy(1,4);
   printf(lcd_putc, "~ (4) Configuracion ");
   break;

   case 31:
//   Tiempo(); // Tomo el tiempo
//   Ambiente(); // Tomo las variables ambientales (incluidas las remotas con cuidado de no saturar el bus)
//   output_low(LCDLED);
   lcd_gotoxy(1,1);
   printf(lcd_putc, "= Control de luces =");
   lcd_gotoxy(1,2);
   printf(lcd_putc, " ~ (1) Prend/Apagar ");
   lcd_gotoxy(1,3);
   printf(lcd_putc, "   (2) Grupos       ");
   lcd_gotoxy(1,4);
   printf(lcd_putc, "   (3) Regulacion   ");
   break;

   case 32:
//   Tiempo(); // Tomo el tiempo
//   Ambiente(); // Tomo las variables ambientales (incluidas las remotas con cuidado de no saturar el bus)
//   output_low(LCDLED);
   lcd_gotoxy(1,1);
   printf(lcd_putc, "= Control de luces =");
   lcd_gotoxy(1,2);
   printf(lcd_putc, "   (1) Prend/Apagar ");
   lcd_gotoxy(1,3);
   printf(lcd_putc, " ~ (2) Grupos       ");
   lcd_gotoxy(1,4);
   printf(lcd_putc, "   (3) Regulacion   ");
   break;

   case 33:
//   Tiempo(); // Tomo el tiempo
//   Ambiente(); // Tomo las variables ambientales (incluidas las remotas con cuidado de no saturar el bus)
//   output_low(LCDLED);
   lcd_gotoxy(1,1);
   printf(lcd_putc, "= Control de luces =");
   lcd_gotoxy(1,2);
   printf(lcd_putc, "   (1) Prend/Apagar ");
   lcd_gotoxy(1,3);
   printf(lcd_putc, "   (2) Grupos       ");
   lcd_gotoxy(1,4);
   printf(lcd_putc, " ~ (3) Regulacion   ");
   break;
/*
   case 41:
//   Tiempo(); // Tomo el tiempo
//   Ambiente(); // Tomo las variables ambientales (incluidas las remotas con cuidado de no saturar el bus)
//   output_low(LCDLED);
   lcd_gotoxy(1,1);
   printf(lcd_putc, "== Nivel Casandra ==");
   lcd_gotoxy(1,2);
   printf(lcd_putc, " ~ (1) Serv y Autom ");
   lcd_gotoxy(1,3);
   printf(lcd_putc, "   (2) Solo Serv    ");
   lcd_gotoxy(1,4);
   printf(lcd_putc, "   (3) Solo Autom   ");
   break;

   case 42:
//   Tiempo(); // Tomo el tiempo
//   Ambiente(); // Tomo las variables ambientales (incluidas las remotas con cuidado de no saturar el bus)
//   output_low(LCDLED);
   lcd_gotoxy(1,1);
   printf(lcd_putc, "== Nivel Casandra ==");
   lcd_gotoxy(1,2);
   printf(lcd_putc, "   (1) Serv y Autom ");
   lcd_gotoxy(1,3);
   printf(lcd_putc, " ~ (2) Solo Serv    ");
   lcd_gotoxy(1,4);
   printf(lcd_putc, "   (3) Solo Autom   ");
   break;

   case 43:
//   Tiempo(); // Tomo el tiempo
//   Ambiente(); // Tomo las variables ambientales (incluidas las remotas con cuidado de no saturar el bus)
//   output_low(LCDLED);
   lcd_gotoxy(1,1);
   printf(lcd_putc, "== Nivel Casandra ==");
   lcd_gotoxy(1,2);
   printf(lcd_putc, "   (2) Solo Serv    ");
   lcd_gotoxy(1,3);
   printf(lcd_putc, " ~ (3) Solo Autom   ");
   lcd_gotoxy(1,4);
   printf(lcd_putc, "   (4) Nada :(      ");
   break;

   case 44:
//   Tiempo(); // Tomo el tiempo
//   Ambiente(); // Tomo las variables ambientales (incluidas las remotas con cuidado de no saturar el bus)
//   output_low(LCDLED);
   lcd_gotoxy(1,1);
   printf(lcd_putc, "== Nivel Casandra ==");
   lcd_gotoxy(1,2);
   printf(lcd_putc, "   (2) Solo Serv    ");
   lcd_gotoxy(1,3);
   printf(lcd_putc, "   (3) Solo Autom   ");
   lcd_gotoxy(1,4);
   printf(lcd_putc, " ~ (4) Nada :(      ");
   break;
*/
   case 51:
//   Tiempo(); // Tomo el tiempo
//   Ambiente(); // Tomo las variables ambientales (incluidas las remotas con cuidado de no saturar el bus)
//   output_low(LCDLED);
   lcd_gotoxy(1,1);
   printf(lcd_putc, "==== Automatico ====");
   lcd_gotoxy(1,2);
   printf(lcd_putc, " ~ (1) Elegir dias  ");
   lcd_gotoxy(1,3);
   printf(lcd_putc, "   (2) Horario      ");
   lcd_gotoxy(1,4);
   printf(lcd_putc, "   (3) Elegir luces ");
   break;

   case 52:
//   Tiempo(); // Tomo el tiempo
//   Ambiente(); // Tomo las variables ambientales (incluidas las remotas con cuidado de no saturar el bus)
//   output_low(LCDLED);
   lcd_gotoxy(1,1);
   printf(lcd_putc, "==== Automatico ====");
   lcd_gotoxy(1,2);
   printf(lcd_putc, "   (1) Elegir dias  ");
   lcd_gotoxy(1,3);
   printf(lcd_putc, " ~ (2) Horario      ");
   lcd_gotoxy(1,4);
   printf(lcd_putc, "   (3) Elegir luces ");
   break;

   case 53:
//   Tiempo(); // Tomo el tiempo
//   Ambiente(); // Tomo las variables ambientales (incluidas las remotas con cuidado de no saturar el bus)
//   output_low(LCDLED);
   lcd_gotoxy(1,1);
   printf(lcd_putc, "==== Automatico ====");
   lcd_gotoxy(1,2);
   printf(lcd_putc, "   (1) Elegir dias  ");
   lcd_gotoxy(1,3);
   printf(lcd_putc, "   (2) Horario      ");
   lcd_gotoxy(1,4);
   printf(lcd_putc, " ~ (3) Elegir luces ");
   break;

   case 61:
//   Tiempo(); // Tomo el tiempo
//   Ambiente(); // Tomo las variables ambientales (incluidas las remotas con cuidado de no saturar el bus)
//   output_low(LCDLED);
   lcd_gotoxy(1,1);
   printf(lcd_putc, "=== Configuracion ==");
   lcd_gotoxy(1,2);
   printf(lcd_putc, " ~ (1) Cambiar Clave");
   lcd_gotoxy(1,3);
   printf(lcd_putc, "   (2) Fecha y hora ");
   lcd_gotoxy(1,4);
   printf(lcd_putc, "   (3) Resetear :O  ");
   break;

   case 62:
//   Tiempo(); // Tomo el tiempo
//   Ambiente(); // Tomo las variables ambientales (incluidas las remotas con cuidado de no saturar el bus)
//   output_low(LCDLED);
   lcd_gotoxy(1,1);
   printf(lcd_putc, "=== Configuracion ==");
   lcd_gotoxy(1,2);
   printf(lcd_putc, "   (1) Cambiar Clave");
   lcd_gotoxy(1,3);
   printf(lcd_putc, " ~ (2) Fecha y hora ");
   lcd_gotoxy(1,4);
   printf(lcd_putc, "   (3) Resetear :O  ");
   break;

   case 63:
//   Tiempo(); // Tomo el tiempo
//   Ambiente(); // Tomo las variables ambientales (incluidas las remotas con cuidado de no saturar el bus)
//   output_low(LCDLED);
   lcd_gotoxy(1,1);
   printf(lcd_putc, "=== Configuracion ==");
   lcd_gotoxy(1,2);
   printf(lcd_putc, "   (2) Fecha y hora ");
   lcd_gotoxy(1,3);
   printf(lcd_putc, " ~ (3) Resetear :O  ");
   lcd_gotoxy(1,4);
   printf(lcd_putc, "   (4) Acerca de..  ");
   break;

   case 64:
//   Tiempo(); // Tomo el tiempo
//   Ambiente(); // Tomo las variables ambientales (incluidas las remotas con cuidado de no saturar el bus)
//   output_low(LCDLED);
   lcd_gotoxy(1,1);
   printf(lcd_putc, "=== Configuracion ==");
   lcd_gotoxy(1,2);
   printf(lcd_putc, "   (2) Fecha y hora ");
   lcd_gotoxy(1,3);
   printf(lcd_putc, "   (3) Resetear :O  ");
   lcd_gotoxy(1,4);
   printf(lcd_putc, " ~ (4) Acerca de..  ");
   break;
 
}

}

void Tiempo(){
ds1307_get_date(day,month,year,dow);
delay_ms(5);

ds1307_get_time(hrs,min,sec);
delay_ms(5);

if ((hrs == 0) && (min == 0) && (sec == 0)){ // Empieza un nuevo dia, reseteamos los valores maximos y minimos
TempMax[0]=0;
TempMin[0]=255;
SolMax[0]=0;
}

switch (dow){
   case 1:
   Dia="Lun";
   break;

   case 2:
   Dia="Mar";
   break;

   case 3:
   Dia="Mie";
   break;

   case 4:
   Dia="Jue";
   break;

   case 5:
   Dia="Vie";
   break;

   case 6:
   Dia="Sab";
   break;

   case 7:
   Dia="Dom";
   break;
}

switch (month){
   case 1:
   Mes="Ene";
   break;

   case 2:
   Mes="Feb";
   break;

   case 3:
   Mes="Mar";
   break;

   case 4:
   Mes="Abr";
   break;

   case 5:
   Mes="May";
   break;

   case 6:
   Mes="Jun";
   break;

   case 7:
   Mes="Jul";
   break;

   case 8:
   Mes="Ago";
   break;

   case 9:
   Mes="Sep";
   break;

   case 10:
   Mes="Oct";
   break;

   case 11:
   Mes="Nov";
   break;

   case 12:
   Mes="Dic";
   break;
}

}

void Ambiente(){
state = get_data();

if (TempOut > TempMax[0]){ // tenemos una nueva temperatura maxima del dia
TempMax[0] = TempOut;
write_eeprom(((dow * 5) + 95),TempMax[0]);
delay_ms(2);
TempMax[1] = day;
write_eeprom(((dow * 5) + 96),TempMax[1]);
delay_ms(2);
TempMax[2] = hrs;
write_eeprom(((dow * 5) + 97),TempMax[2]);
delay_ms(2);
TempMax[3] = min;
write_eeprom(((dow * 5) + 98),TempMax[3]);
delay_ms(2);
}

if (TempOut < TempMin[0]){ // tenemos una nueva temperatura minima del dia
TempMin[0] = TempOut;
write_eeprom(((dow * 5) + 130),TempMin[0]);
delay_ms(2);
TempMin[1] = day;
write_eeprom(((dow * 5) + 131),TempMin[1]);
delay_ms(2);
TempMin[2] = hrs;
write_eeprom(((dow * 5) + 132),TempMin[2]);
delay_ms(2);
TempMin[3] = min;
write_eeprom(((dow * 5) + 133),TempMin[3]);
delay_ms(2);
}

if (Sol > SolMax[0]){ // tenemos una nueva radiacion solar maxima
SolMax[0] = Sol;
write_eeprom(((dow * 5) + 165),SolMax[0]);
delay_ms(2);
SolMax[1] = day;
write_eeprom(((dow * 5) + 166),SolMax[1]);
delay_ms(2);
SolMax[2] = hrs;
write_eeprom(((dow * 5) + 167),SolMax[2]);
delay_ms(2);
SolMax[3] = min;
write_eeprom(((dow * 5) + 168),SolMax[3]);
delay_ms(2);
}

} // fn

void Holding(){
while (input(ARRIBA)==0 || input(ABAJO)==0 || input(OOKK)==0 || input(CANCEL)==0){

lcd_gotoxy(1,2);
printf(lcd_putc,"   hola  :)     ");

} // while

} //fn


void AcercaDe(){ // se lleva el 5% de ROM
restart_wdt();
int k=0;
while (input(ARRIBA)==1 && input(ABAJO)==1 && input(CANCEL)==1){
if (k<250) ++k;
lcd_gotoxy(1,1);
if (k==0) printf(lcd_putc,"==                 C");
if (k==5) printf(lcd_putc,"==                C ");
if (k==10) printf(lcd_putc,"==               C  ");
if (k==15) printf(lcd_putc,"==              C  A");
if (k==20) printf(lcd_putc,"==             C  A ");
if (k==25) printf(lcd_putc,"==            C  A  ");
if (k==30) printf(lcd_putc,"==           C  A  S");
if (k==35) printf(lcd_putc,"==          C  A  S ");
if (k==40) printf(lcd_putc,"==         C  A  S  ");
if (k==45) printf(lcd_putc,"==        C  A  S  A");
if (k==50) printf(lcd_putc,"==       C  A  S  A ");
if (k==55) printf(lcd_putc,"==      C  A  S  A  ");
if (k==60) printf(lcd_putc,"==     C  A  S  A  N");
if (k==65) printf(lcd_putc,"==    C  A  S  A  N ");
if (k==70) printf(lcd_putc,"==   C  A  S  A  N  ");
if (k==75) printf(lcd_putc,"==  C  A  S  A  N  D");
if (k==80) printf(lcd_putc,"== C  A  S  A  N  D ");
if (k==85) printf(lcd_putc,"== C A  S  A  N  D  ");
if (k==90) printf(lcd_putc,"== CA  S  A  N  D  R");
if (k==95) printf(lcd_putc, "== CA S  A  N  D  R ");
if (k==100) printf(lcd_putc,"== CAS  A  N  D  R  ");
if (k==105) printf(lcd_putc,"== CAS A  N  D  R  A");
if (k==110) printf(lcd_putc,"== CASA  N  D  R  A ");
if (k==115) printf(lcd_putc,"== CASA N  D  R  A  ");
if (k==120) printf(lcd_putc,"== CASAN  D  R  A   ");
if (k==125) printf(lcd_putc,"== CASAN D  R  A    ");
if (k==130) printf(lcd_putc,"== CASAND  R  A     ");
if (k==135) printf(lcd_putc,"== CASAND R  A      ");
if (k==140) printf(lcd_putc,"== CASANDR  A       ");
if (k==145) printf(lcd_putc,"== CASANDR A        ");
if (k==150) printf(lcd_putc,"== CASANDRA         ");
if (k==155) printf(lcd_putc,"=== CASANDRA       =");
if (k==160) printf(lcd_putc,"==== CASANDRA     ==");
if (k==165) printf(lcd_putc,"===== CASANDRA   ===");
if (k==170) printf(lcd_putc,"===== CASANDRA =====");
if (k==247) printf(lcd_putc,"     CASANDRA %c     ",220);

lcd_gotoxy(1,2);
printf(lcd_putc,"Vers: 0.9b  Jun-2014");
lcd_gotoxy(1,3);
printf(lcd_putc,"~Gonzalo Carvallo M.");
lcd_gotoxy(1,4);
printf(lcd_putc,"~gonzacarv@gmail.com");
restart_wdt();
} // while
Menu = 1;
} // fn

