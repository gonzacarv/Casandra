#include <16F877A.h> // N1
#fuses XT, NOWDT, NOPROTECT, NOLVP, PUT, NOBROWNOUT // Opciones de configuración
#use delay(clock=4000000)  //Reloj de 4MHz

////////// Tipo de entradas y salidas (predefinidas con TRIS) ///////////

#use fast_io(a)
#use fast_io(b)
#use fast_io(c)
#use fast_io(d)

#use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7, enable=PIN_C5) // Comunicacion serial

//////////////////////////////Corresponde a MODULO NUMERO 1//////////////////////////////////////////
#define LUZ0 33
#define LUZ1 34
#define LUZ2 35
#define LUZ3 36
#define LUZ4 37
#define LUZ5 38
#define LUZ6 39
#define LUZ7 40
#define LUZ8 41
#define LUZ9 42
#define LUZ10 43
#define LUZ11 44
#define TODOS 94 // 
#define SERVICIOS 95 //  
#define EXTERIOR 96 //  
#define FRENTE 97 //
#define PASO 98 //



////////// Nombres para las entradas ////////
#define IN1 PIN_D1
#define IN2 PIN_D0
#define IN3 PIN_C3
#define IN4 PIN_C2
#define IN5 PIN_C1
#define IN6 PIN_C0
#define IN7 PIN_D6
#define IN8 PIN_D5
#define IN9 PIN_D4
#define IN10 PIN_C4
#define IN11 PIN_D3
#define IN12 PIN_D2

////////// Nombres para las salidas ////////
#define OUT1 PIN_B1
#define OUT2 PIN_B2
#define OUT3 PIN_B3 
#define OUT4 PIN_B4
#define OUT5 PIN_B5
#define OUT6 PIN_B6
#define OUT7 PIN_B7
#define OUT8 PIN_A0
#define OUT9 PIN_A1
#define OUT10 PIN_A2
#define OUT11 PIN_E0
#define OUT12 PIN_A5

////////// Nombres para entradas analogicas del ADC ////////
#define ANA1 PIN_A5
#define ANA2 PIN_E0
#define ANA3 PIN_E1
#define ANA4 PIN_E2

////////// Otros nombres ///////////////
#define LED PIN_D7 // Piloto led del modulo
#define LEDON output_low(LED)     /// Comando rapido para el encendido y 
#define LEDOFF output_high(LED)   /// apagado del piloto LED.
#define CruX PIN_B0 // Entrada de cruce por cero

////////// Encabezado de funciones ///////////////
void Cruce(); // Funcion de cruce por 0 que reinicia el timer
void Comunica(); // Funcion de lectura de puerto serial y armado del comando
void CambioLuz(int Luz, int Param); // Funcion de lectura de puerto serial y armado del comando
void Entradas(); // Funcion de lectura de las entradas
void Analogicos(); // Funcion de toma de valores analogicos
void Salidas(); // Funcion de Salida de luces


////////// Variables Globales ///////////////
int Comando[4]; // Carga de EVENTO y VALOR
int LuzIntensidad[12]; // Arreglo de configuracion de luces
short LuzEstado[12]; // Arreglo de Estado de luces
short TeclaEstado[12]; // Arreglo de Estado de las teclas
//int EstadoAlarma; // Variable de control de estado de la alarma/casandra
long Tpo; // Valor del timer1
int i=0; // Contador multiproposito
int j=0; // Contador multiproposito
long ii=0; // Contador largo multiproposito

void main(){

set_tris_a(0b00001011);  // Puerto A como salidas, menos A0, A1 y A3 que son entradas analogicas.
set_tris_b(0b00000001);  // Puerto B, todas salidas, menos B0 que es el cruce por cero
set_tris_c(0b10011111);  // Puerto C, de 0 a 4 -> entradas; 5 y 6 para RS232 salidas; C7 es RX -> Entrada
set_tris_d(0b01111111);  // Puerto D, todas entradas menos el Piloto (D7)

setup_adc_ports(RA0_RA1_Ra3_ANALOG);  // Entradas analogicas.
setup_adc(ADC_CLOCK_INTERNAL);  // Barrido ¿Hace falta?

setup_timer_1(T1_INTERNAL | T1_DIV_BY_1);
enable_interrupts(global);
//disable_interrupts(global);
enable_interrupts(int_ext);

delay_ms(500);
LEDON;
delay_ms(500);
LEDOFF;
delay_ms(500);
LEDON;
delay_ms(500);
LEDOFF;
delay_ms(500);
LEDON;
delay_ms(500);
LEDOFF;
delay_ms(500);
LEDON;
delay_ms(500);
LEDOFF;
delay_ms(500);
LEDON;
delay_ms(500);
LEDOFF;


while (1){
/*
if (j) Salidas();  // Actuamos
else{
Comunica(); // Leemos bus de datos
Entradas(); // Leemos entradas
}
++j;
*/
Salidas();
Comunica(); // Leemos bus de datos
Entradas(); // Leemos entradas


} // while 1

} // main


#int_ext
void Cruce(){
set_timer1(0);
++j;
}

void Comunica(){  

if (kbhit()){
Comando[i]=getc();
if (Comando[i] == 150) i=0;
else ++i;

if (i==3){
i=0;
if (( (Comando[0]) + (Comando[1]) ) == Comando[2]){ // Prueba de checksum

switch (Comando[0]){

Case LUZ0:
   CambioLuz(0,Comando[1]);
break;

Case LUZ1:
   CambioLuz(1,Comando[1]);
break;

Case LUZ2:
   CambioLuz(2,Comando[1]);
break;

Case LUZ3:
   CambioLuz(3,Comando[1]);
break;

Case LUZ4:
   CambioLuz(4,Comando[1]);
break;

Case LUZ5:
   CambioLuz(5,Comando[1]);
break;

Case LUZ6:
   CambioLuz(6,Comando[1]);
break;

Case LUZ7:
   CambioLuz(7,Comando[1]);
break;

Case LUZ8:
   CambioLuz(8,Comando[1]);
break;

Case LUZ9:
   CambioLuz(9,Comando[1]);
break;

Case LUZ10:
   CambioLuz(10,Comando[1]);
break;

Case LUZ11:
   CambioLuz(11,Comando[1]);
break;


Case TODOS:
   CambioLuz(94,Comando[1]);
break;

Case SERVICIOS:
   CambioLuz(95,Comando[1]);
break;

Case EXTERIOR:
   CambioLuz(96,Comando[1]);
break;

Case FRENTE:
   CambioLuz(97,Comando[1]);
break;

Case PASO:
   CambioLuz(98,Comando[1]);
break;


} // Switch
} // if checksum
} // if i
} // if get
}//fn

voidn

if ( (input(IN1)) ^ TeclaEstado[0] ){  // Si cambia la tecla
TeclaEstado[0]=input(IN1); // Gurdamos el Cambio
if ((LuzEstado[0]) == false) {
printf("%c%c%c%c%c", 150, 150, LUZ0, 80, LUZ0 + 80); //PRENDO
LuzEstado[0]=true;
} else {
printf("%c%c%c%c%c", 150, 150, LUZ0, 85, LUZ0 + 85); //PRENDO
LuzEstado[0]=false;
}
}

if ( (input(IN2)) ^ TeclaEstado[1] ){  // Si cambia la tecla
TeclaEstado[1]=input(IN2); // Gurdamos el Cambio
if ((LuzEstado[1]) == false) {
printf("%c%c%c%c%c", 150, 150, LUZ1, 80, LUZ0 + 80); //PRENDO
LuzEstado[1]=true;
} else {
printf("%c%c%c%c%c", 150, 150, LUZ1, 85, LUZ0 + 85); //PRENDO
LuzEstado[1]=false;
}
}

if ( (input(IN3)) ^ TeclaEstado[2] ){  // Si cambia la tecla
TeclaEstado[2]=input(IN3); // Gurdamos el Cambio
if ((LuzEstado[2]) == false) {
printf("%c%c%c%c%c", 150, 150, LUZ2, 80, LUZ0 + 80); //PRENDO
LuzEstado[2]=true;
} else {
printf("%c%c%c%c%c", 150, 150, LUZ2, 85, LUZ0 + 85); //PRENDO
LuzEstado[2]=false;
}
}

if ( (input(IN4)) ^ TeclaEstado[3] ){  // Si cambia la tecla
TeclaEstado[3]=input(IN4); // Gurdamos el Cambio
if ((LuzEstado[3]) == false) {
printf("%c%c%c%c%c", 150, 150, LUZ3, 80, LUZ0 + 80); //PRENDO
LuzEstado[3]=true;
} else {
printf("%c%c%c%c%c", 150, 150, LUZ3, 85, LUZ0 + 85); //PRENDO
LuzEstado[3]=false;
}
}

if ( (input(IN5)) ^ TeclaEstado[4] ){  // Si cambia la tecla
TeclaEstado[4]=input(IN5); // Gurdamos el Cambio
if ((LuzEstado[4]) == false) {
printf("%c%c%c%c%c", 150, 150, LUZ4, 80, LUZ0 + 80); //PRENDO
LuzEstado[4]=true;
} else {
printf("%c%c%c%c%c", 150, 150, LUZ4, 85, LUZ0 + 85); //PRENDO
LuzEstado[4]=false;
}
}

if ( (input(IN6)) ^ TeclaEstado[5] ){  // Si cambia la tecla
TeclaEstado[5]=input(IN6); // Gurdamos el Cambio
if ((LuzEstado[5]) == false) {
printf("%c%c%c%c%c", 150, 150, LUZ5, 80, LUZ0 + 80); //PRENDO
LuzEstado[5]=true;
} else {
printf("%c%c%c%c%c", 150, 150, LUZ5, 85, LUZ0 + 85); //PRENDO
LuzEstado[5]=false;
}
}

if ( (input(IN7)) ^ TeclaEstado[6] ){  // Si cambia la tecla
TeclaEstado[6]=input(IN7); // Gurdamos el Cambio
if ((LuzEstado[6]) == false) {
printf("%c%c%c%c%c", 150, 150, LUZ6, 80, LUZ0 + 80); //PRENDO
LuzEstado[6]=true;
} else {
printf("%c%c%c%c%c", 150, 150, LUZ6, 85, LUZ0 + 85); //PRENDO
LuzEstado[6]=false;
}
}

if ( (input(IN8)) ^ TeclaEstado[7] ){  // Si cambia la tecla
TeclaEstado[7]=input(IN8); // Gurdamos el Cambio
if ((LuzEstado[7]) == false) {
printf("%c%c%c%c%c", 150, 150, LUZ7, 80, LUZ0 + 80); //PRENDO
LuzEstado[7]=true;
} else {
printf("%c%c%c%c%c", 150, 150, LUZ7, 85, LUZ0 + 85); //PRENDO
LuzEstado[7]=false;
}
}

if ( (input(IN9)) ^ TeclaEstado[8] ){  // Si cambia la tecla
TeclaEstado[8]=input(IN9); // Gurdamos el Cambio
if ((LuzEstado[8]) == false) {
printf("%c%c%c%c%c", 150, 150, LUZ8, 80, LUZ0 + 80); //PRENDO
LuzEstado[8]=true;
} else {
printf("%c%c%c%c%c", 150, 150, LUZ8, 85, LUZ0 + 85); //PRENDO
LuzEstado[8]=false;
}
}

if ( (input(IN10)) ^ TeclaEstado[9] ){  // Si cambia la tecla
TeclaEstado[9]=input(IN10); // Gurdamos el Cambio
if ((LuzEstado[9]) == false) {
printf("%c%c%c%c%c", 150, 150, LUZ9, 80, LUZ0 + 80); //PRENDO
LuzEstado[9]=true;
} else {
printf("%c%c%c%c%c", 150, 150, LUZ9, 85, LUZ0 + 85); //PRENDO
LuzEstado[9]=false;
}
}

if ( (input(IN11)) ^ TeclaEstado[10] ){  // Si cambia la tecla
TeclaEstado[10]=input(IN11); // Gurdamos el Cambio
if ((LuzEstado[10]) == false) {
printf("%c%c%c%c%c", 150, 150, LUZ10, 80, LUZ0 + 80); //PRENDO
LuzEstado[10]=true;
} else {
printf("%c%c%c%c%c", 150, 150, LUZ10, 85, LUZ0 + 85); //PRENDO
LuzEstado[10]=false;
}
}

if ( (input(IN12)) ^ TeclaEstado[11] ){  // Si cambia la tecla
TeclaEstado[11]=input(IN12); // Gurdamos el Cambio
if ((LuzEstado[11]) == false) {
printf("%c%c%c%c%c", 150, 150, LUZ11, 80, LUZ0 + 80); //PRENDO
LuzEstado[11]=true;
} else {
printf("%c%c%c%c%c", 150, 150, LUZ11, 85, LUZ0 + 85); //PRENDO
LuzEstado[11]=false;
}
}

 
}

void CambioLuz(int Luz, int Param){ // Acciones sobre las luces

switch (Luz){

   Case 0:
      if (Param < 60) LuzIntensidad[0]=Param;
      if (Param == 80) LuzEstado[0]=True;
      if (Param == 85) LuzEstado[0]=False;
      if (Param == 60){ //Oscilador de tiempo largo
      if (bit_test(j,7)){
      
      } // Bit test
      } // Parametro 60=Oscilador

   break;
   
   Case 1:
   
   break;
   
   Case 2:
   
   break;
   
   Case 3:
   
   break;
   
   Case 4:
   
   break;
   
   Case 5:
   
   break;
   
   Case 6:
   
   break;
   
   Case 7:
   
   break;
   
   Case 8:
   
   break;
   
   Case 9:
   
   break;
   
   Case 10:

   break;
   
   Case 11:
   
   break;

  
  
  
   Case 94: // Todas
   
   break;
   
   Case 95: // Servicios 
   
   break;
   
   Case 96: // Exterior
   
   break;
   
   Case 97: // Frente
   
   break;
   
   Case 98: // Paso Alarma
   
   break;

  
}

}

void Salidas(){

Tpo = get_timer1();

if (LuzEstado[0]){



break;




} else output_low(OUT1); //if luzestado  




if (((Tpo > ii) && (Tpo < ii + 500)) || ((Tpo > ii + 10000) && (Tpo < ii + 10500))) {
output_high(OUT6);
}


if (input(IN1)) ii = 7500;
if (input(IN2)) ii = 6900;
if (input(IN3)) ii = 6300;
if (input(IN4)) ii = 5800;
if (input(IN5)) ii = 5200;
if (input(IN6)) ii = 4600;
if (input(IN7)) ii = 4000;
if (input(IN8)) ii = 3400;
if (input(IN9)) ii = 2800;
if (input(IN10)) ii = 0;
if (input(IN11)) ii = 0;
if (input(IN12)) ii = 0;

output_low(OUT6);
}

