CCS PCM C Compiler, Version 5.025, 29880               15-feb-15 03:21

               Filename:   D:\Dropbox\Gonzalo\Proyecto Casandra\Version final\Soft\Luces\4\main.lst

               ROM used:   122 words (1%)
                           Largest free fragment is 2048
               RAM used:   5 (1%) at main() level
                           6 (2%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   019
0003:  NOP
.................... /*====================================================================================================== 
.................... ||   Proyecto: Casandra v1.0                                                                          || 
.................... ||   Autor: Gonzalo Carvallo (gonzacarv@gmail.com)                                                    || 
.................... ||   Fecha: 06/2014                                                                                   || 
.................... ||   Compilador: PCWHD v5.025 (www.ccsinfo.com)                                                       || 
.................... ||   Fuente: http://                                                                                  || 
.................... ||                                                                                                    || 
.................... || Firmware de modulos actuadores de luces correspondientes al sistema domotico CASANDRA. Capacidad   || 
.................... || para actuar sobre 12 consumos y leer 12 entradas digitales + 2 analogicas. Comunicacion sobre par  || 
.................... || trensado usando el transceptor SN75176.                                                            || 
.................... ||                                                                                                    || 
.................... ======================================================================================================*/ 
....................  
.................... #include <16F877A.h> // N1 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #fuses XT, NOWDT, NOPROTECT, NOLVP, PUT//, NOBROWNOUT // Opciones de configuración 
.................... #use delay(clock=4000000)  //Reloj de 4MHz 
0004:  MOVLW  21
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   018
000A:  MOVLW  01
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  4A
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  GOTO   016
0016:  DECFSZ 00,F
0017:  GOTO   00A
0018:  RETURN
....................  
.................... #byte TMR1H = 0x0F // Le pongo nombre al registro alto de timer 1 
.................... #byte TMR1L = 0x0E // Le pongo nombre al registro bajo de timer 1 
....................  
.................... ////////// Tipo de entradas y salidas (predefinidas con TRIS) /////////// 
....................  
.................... /*#use fast_io(a) 
.................... #use fast_io(b) 
.................... #use fast_io(c) 
.................... #use fast_io(d) 
.................... */ 
.................... //#use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7, enable=PIN_C5) // Comunicacion serial 
....................  
.................... ////////// Otros nombres /////////////// 
.................... #define LED PIN_D7 // Piloto led del modulo 
.................... #define LEDON output_low(LED)     /// Comando rapido para el encendido y  
.................... #define LEDOFF output_high(LED)   /// apagado del piloto LED. 
.................... //#define CruX PIN_B0 // Entrada de cruce por cero 
....................  
....................  
.................... void main(){ 
0019:  MOVF   03,W
001A:  ANDLW  1F
001B:  MOVWF  03
001C:  BSF    03.5
001D:  BSF    1F.0
001E:  BSF    1F.1
001F:  BSF    1F.2
0020:  BCF    1F.3
0021:  MOVLW  07
0022:  MOVWF  1C
0023:  BCF    03.7
.................... while (1){ 
.................... LEDON; 
0024:  BCF    08.7
0025:  BCF    03.5
0026:  BCF    08.7
.................... delay_ms(200); 
0027:  MOVLW  C8
0028:  MOVWF  21
0029:  CALL   004
.................... LEDOFF; 
002A:  BSF    03.5
002B:  BCF    08.7
002C:  BCF    03.5
002D:  BSF    08.7
.................... delay_ms(200); 
002E:  MOVLW  C8
002F:  MOVWF  21
0030:  CALL   004
.................... LEDON; 
0031:  BSF    03.5
0032:  BCF    08.7
0033:  BCF    03.5
0034:  BCF    08.7
.................... delay_ms(200); 
0035:  MOVLW  C8
0036:  MOVWF  21
0037:  CALL   004
.................... LEDOFF; 
0038:  BSF    03.5
0039:  BCF    08.7
003A:  BCF    03.5
003B:  BSF    08.7
.................... delay_ms(200); 
003C:  MOVLW  C8
003D:  MOVWF  21
003E:  CALL   004
.................... LEDON; 
003F:  BSF    03.5
0040:  BCF    08.7
0041:  BCF    03.5
0042:  BCF    08.7
.................... delay_ms(200); 
0043:  MOVLW  C8
0044:  MOVWF  21
0045:  CALL   004
.................... LEDOFF; 
0046:  BSF    03.5
0047:  BCF    08.7
0048:  BCF    03.5
0049:  BSF    08.7
.................... delay_ms(200); 
004A:  MOVLW  C8
004B:  MOVWF  21
004C:  CALL   004
.................... LEDON; 
004D:  BSF    03.5
004E:  BCF    08.7
004F:  BCF    03.5
0050:  BCF    08.7
.................... delay_ms(200); 
0051:  MOVLW  C8
0052:  MOVWF  21
0053:  CALL   004
.................... LEDOFF; 
0054:  BSF    03.5
0055:  BCF    08.7
0056:  BCF    03.5
0057:  BSF    08.7
.................... delay_ms(200); 
0058:  MOVLW  C8
0059:  MOVWF  21
005A:  CALL   004
.................... LEDON; 
005B:  BSF    03.5
005C:  BCF    08.7
005D:  BCF    03.5
005E:  BCF    08.7
.................... delay_ms(200); 
005F:  MOVLW  C8
0060:  MOVWF  21
0061:  CALL   004
.................... LEDOFF; 
0062:  BSF    03.5
0063:  BCF    08.7
0064:  BCF    03.5
0065:  BSF    08.7
.................... delay_ms(200); 
0066:  MOVLW  C8
0067:  MOVWF  21
0068:  CALL   004
.................... LEDON; 
0069:  BSF    03.5
006A:  BCF    08.7
006B:  BCF    03.5
006C:  BCF    08.7
.................... delay_ms(200); 
006D:  MOVLW  C8
006E:  MOVWF  21
006F:  CALL   004
.................... LEDOFF; 
0070:  BSF    03.5
0071:  BCF    08.7
0072:  BCF    03.5
0073:  BSF    08.7
.................... delay_ms(200); 
0074:  MOVLW  C8
0075:  MOVWF  21
0076:  CALL   004
0077:  BSF    03.5
0078:  GOTO   024
.................... } 
.................... } 
....................  
0079:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
