#include <16F877A.h>
#fuses XT, NOWDT, NOPROTECT, NOLVP, PUT, NOBROWNOUT // Opciones de configuración
#use delay(clock=4000000)  //Reloj de 4MHz

////////// Tipo de entradas y salidas (predefinidas con TRIS) ///////////
/*
#use fast_io(a)
#use fast_io(b)
#use fast_io(c)
#use fast_io(d)

#use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7, enable=PIN_C5) // Comunicacion serial*/

////////// Nombres para las entradas para el sistema de buses //////// En total son 60 --> desde 62(>) a 122(z)
//////////////////////////////Corresponde a MODULO NUMERO 1//////////////////////////////////////////
#define LUZ0 62
#define LUZ1 63
#define LUZ2 64
#define LUZ3 65
#define LUZ4 66
#define LUZ5 67
#define LUZ6 68
#define LUZ7 69
#define LUZ8 70
#define LUZ9 71
#define LUZ10 72
#define LUZ11 73
#define ALRM 42 // (*) Para todos los modulos


////////// Nombres para las entradas ////////
#define IN1 PIN_D1
#define IN2 PIN_D0
#define IN3 PIN_C3
#define IN4 PIN_C2
#define IN5 PIN_C1
#define IN6 PIN_C0
#define IN7 PIN_D6
#define IN8 PIN_D5
#define IN9 PIN_D4
#define IN10 PIN_C4
#define IN11 PIN_D3
#define IN12 PIN_D2

////////// Nombres para las salidas ////////
#define OUT1 PIN_B1
#define OUT2 PIN_B2
#define OUT3 PIN_B3 
#define OUT4 PIN_B4
#define OUT5 PIN_B5
#define OUT6 PIN_B6
#define OUT7 PIN_B7
#define OUT8 PIN_A0
#define OUT9 PIN_A1
#define OUT10 PIN_A2
#define OUT11 PIN_E0
#define OUT12 PIN_A5
/*
////////// Nombres para entradas analogicas del ADC ////////
#define ANA1 PIN_A5
#define ANA2 PIN_E0
#define ANA3 PIN_E1
#define ANA4 PIN_E2

////////// Otros nombres ///////////////
#define LED PIN_D7 // Piloto led del modulo
#define LEDON output_low(LED)     /// Comando rapido para el encendido y 
#define LEDOFF output_high(LED)   /// apagado del piloto LED.
#define CruX PIN_B0 // Entrada de cruce por cero

////////// Encabezado de funciones ///////////////
void Cruce(); // Funcion de cruce por 0 que reinicia el timer
void Comunica(); // Funcion de lectura de puerto serial y armado del comando
void Entradas(); // Funcion de lectura de las entradas
void Analogicos(); // Funcion de toma de valores analogicos
void Salidas(); // Funcion de Salida de luces


////////// Variables Globales ///////////////
int Comando[4]; // Carga de EVENTO y VALOR
int LuzConf[3][12]; // Arreglo de configuracion de luces
short LuzEstado[12]; // Arreglo de Estado de luces
short TeclaEstado[12]; // Arreglo de Estado de las teclas
int EstadoAlarma; // Variable de control de estado de la alarma/casandra
long Tpo; // Valor del timer1
int i=0; // Contador multiproposito
long ii=0; // Contador largo multiproposito
*/
void Cruce(); // Funcion de cruce por 0 que reinicia el timer
void Salidas(); // Funcion de Salida de luces
long ii=0; // Contador largo multiproposito



void main(){
/*
set_tris_a(0b00001011);  // Puerto A como salidas, menos A0, A1 y A3 que son entradas analogicas.
set_tris_b(0b00000001);  // Puerto B, todas salidas, menos B0 que es el cruce por cero
set_tris_c(0b10011111);  // Puerto C, de 0 a 4 -> entradas; 5 y 6 para RS232 salidas; C7 es RX -> Entrada
set_tris_d(0b01111111);  // Puerto D, todas entradas menos el Piloto (D7)

setup_adc_ports(RA0_RA1_Ra3_ANALOG);  // Entradas analogicas.
setup_adc(ADC_CLOCK_INTERNAL);  // Barrido ¿Hace falta?
*/
setup_timer_1(T1_INTERNAL | T1_DIV_BY_1);
enable_interrupts(global);
//disable_interrupts(global);
enable_interrupts(int_ext);


delay_ms(500);
output_high(OUT12);
delay_ms(500);
output_low(OUT12);
delay_ms(500);
output_high(OUT12);
delay_ms(500);
output_low(OUT12);
delay_ms(500);
output_high(OUT12);
delay_ms(500);
output_low(OUT12);


while (1){
//Comunica(); // Leemos bus de datos
//Entradas(); // Leemos entradas
Salidas();  // Actuamos


} // while 1

} // main


#int_ext
void Cruce(){
//if (input(IN1)) {
//ii=ii+10;
//printf(" %Lu ",ii);
//}
set_timer1(0);
}



void Salidas(){

//Tpo = (int) (get_timer1() / 940);


Tpo = get_timer1();

if ((Tpo > ii) && (Tpo < ii + 100)) {
output_high(OUT6);
}

if ((Tpo > ii + 10000) && (Tpo < ii + 10100)) {
output_high(OUT6);
}

if (input(IN1)) ii = 0;
if (input(IN2)) ii = 940;
if (input(IN3)) ii = 1880;
if (input(IN4)) ii = 2820;
if (input(IN5)) ii = 3760;
if (input(IN6)) ii = 4700;
if (input(IN7)) ii = 5640;
if (input(IN8)) ii = 6580;
if (input(IN9)) ii = 7520;
if (input(IN10)) ii = 8460;
if (input(IN11)) ii = 9400;
if (input(IN12)) ii = 10340;
output_low(OUT6);

/*
if (ii) {
if (((Tpo > 9000) && (Tpo < 10000)) || (Tpo > 19000)){
output_low(OUT12);
} else if ((Tpo > ii)||(Tpo > ii+10000)) output_high(OUT12);
} else output_high(OUT12);
//delay_us(10);
//output_low(OUT12);

if (input(IN1)) ii = 0;
if (input(IN2)) ii = 940;
if (input(IN3)) ii = 1880;
if (input(IN4)) ii = 2820;
if (input(IN5)) ii = 3760;
if (input(IN6)) ii = 4700;
if (input(IN7)) ii = 5640;
if (input(IN8)) ii = 6580;
if (input(IN9)) ii = 7520;
if (input(IN10)) ii = 8460;
if (input(IN11)) ii = 9400;
if (input(IN12)) ii = 10340;

*/
}

